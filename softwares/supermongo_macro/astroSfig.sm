astroSfig
    # 
    # here we provide some useful tools for the star formation things
    # 
    print 'load astroSfig.sm\n' {}
    print 'set lg_SFR_MS = calc_Bethermin2014_SFR(z,lg_M_star) --> lg_SFR_MS\n' {}
    print 'set lg_SFR_MS = calc_Schreiber2014_SFR(z,lg_M_star) --> lg_SFR_MS\n' {}
    print 'set lg_SFR_MS = calc_Sargent2014_SFR(z,lg_M_star) --> lg_SFR_MS\n' {}



calc_Schreiber2014_SFR 02
    # 
    # calculate SFR according to the sSFR evolution track of MS galaxies in Schreiber 2014 (arxiv) 2015 A&A
    # note that they are using Salpeter IMF for SFR and Mstar
    # input $1 is redshift
    # input $2 is stellar mass in log
    # output $0 is SFR in log
    # 
    if($?1==0||$?2==0){print 'Usage: calc_Schreiber2014_SFR z lg_M_star --> lg_SFR_MS\n' {} return}
    set _Schreiber2014_z = $1
    set _Schreiber2014_Mstar = $2
    set _Schreiber2014_SFR = _Schreiber2014_Mstar-9.0-0.50+1.5*lg(_Schreiber2014_z+1.0)
    set _Schreiber2014_mmr = _Schreiber2014_Mstar-9.0-0.36-2.5*lg(_Schreiber2014_z+1.0)
    set _Schreiber2014_SFR = _Schreiber2014_mmr>0 ? (_Schreiber2014_SFR-0.30*_Schreiber2014_mmr**2) : _Schreiber2014_SFR
    set $0 = _Schreiber2014_SFR
    return

calc_Sargent2014_SFR 02
    # 
    # calculate SFR according to the sSFR evolution track of MS galaxies in Sargent 2014 ApJ (2013 arXiv)
    # note that they are using Chabrier IMF for SFR and Mstar
    # input $1 is redshift
    # input $2 is stellar mass in log
    # output $0 is SFR in log
    # 
    # see paper http://fr.arxiv.org/pdf/1303.4392v2
    #     appendix
    #     equation A1  sSFR(M_star,z) = N_M_star * exp(A*z/(1.0+B*z**C))
    #                  where N_M_star = 0.095 * 10**(-0.21*(log_M_star-lg(5e10)))
    #                        A = 2.05, B = 0.16, C = 1.54
    # 
    if($?1==0||$?2==0){print 'Usage: calc_Sargent2014_SFR z lg_M_star --> lg_SFR_MS\n' {} return}
    set _Sargent2014_z = $1
    set _Sargent2014_Mstar = $2
    set _Sargent2014_sSFR = 0.095 * 10**(-0.21*($2-lg(5e10))) * exp(2.05*$1/(1.0+0.16*$1**1.54))
    set _Sargent2014_SFR = lg(_Sargent2014_sSFR / 1e9 * 10**($2))
    set $0 = _Sargent2014_SFR
    #print {_Sargent2014_SFR _Sargent2014_sSFR _Sargent2014_Mstar _Sargent2014_z}
    return

calc_Bethermin2014_SFR 02
    # 
    # calculate SFR according to the sSFR evolution track of MS galaxies in Bethermin 2014 arXiv (2015 A&A)
    # input $1 is redshift
    # input $2 is stellar mass in log
    # output $0 is SFR in log
    # 
    # see paper http://fr.arxiv.org/pdf/1409.5796v2
    #     section 4.2
    #     paragraph 1  (0.061±0.006Gyr**{−1})*(1+z)**{2.82±0.12} at z<2 and as (1+z)**{2.2±0.3} at z>2.
    # 
    if($?1==0||$?2==0){print 'Usage: calc_Bethermin2014_SFR z lg_M_star --> lg_SFR_MS\n' {} return}
    set _Bethermin2014_z = $1
    set _Bethermin2014_opz = 1.0 + _Bethermin2014_z
    set _Bethermin2014_Mstar = $2
    set _Bethermin2014_sSFR = (_Bethermin2014_z<2.0) ? (0.061*_Bethermin2014_opz**2.82) : (_Bethermin2014_opz**2.2)/10.0 
                                                                                          #<TODO># ERROR in Bethermin 2015 ???
                                                                                          #<TODO># ERROR in Bethermin 2015 ???
    #<TODO># set _Bethermin2014_sSFR = _Bethermin2014_sSFR / 10.0 # <TODO> seems there has a factor of 10 correction?
    set _Bethermin2014_SFR = lg(_Bethermin2014_sSFR / 1e9 * 10**($2))
    set $0 = _Bethermin2014_SFR
    return

calc_Bethermin2014_U 02
    # 
    # calculate <U> according to the <U> evolution track of MS galaxies in Bethermin 2014 arXiv (2015 A&A)
    # input $1 is redshift
    # input $2 is starburst-ness: 0 for MS, 1 for SB. 
    # output $0 is <U>
    # 
    # see paper http://fr.arxiv.org/pdf/1409.5796v2
    #     Fig.7 caption: (3.0+-1.1)*(1+z)**(1.8+-0.4) for MS, 31+-3 for SB. 
    # 
    if($?1==0){print 'Usage: set U = calc_Bethermin2014_U(z) ==> <U>\n' {} return}
    set _Bethermin2014_z = $1
    set _Bethermin2014_opz = 1.0 + _Bethermin2014_z
    set _Bethermin2014_U = 3.0 * _Bethermin2014_opz**1.8
    if($?2) {if($2>=1) {set _Bethermin2014_U = 31.0} }
    set $0 = _Bethermin2014_U
    return



calc_Daddi2010_CO 05
    # 
    # calculate the CO luminosity for a given total IR luminosity
    # CO luminosity is in unit of K km s-1 pc2, IR luminosity is in unit of solar luminosity. 
    # input $1 is LTIR (in linear not in log)
    # input $2 is J_upper
    # input $3 is z
    # input $4 is starburst-ness: 1.0 for strong SB, 0.0 for MS. Default is 0.0.
    # input $5 is excitation: if unset then same as starburst-ness: 1.0 for thermalized excitation, 0.0 for HERACLES/z2BzK exc. 
    # 
    # see paper http://fr.arxiv.org/pdf/1003.3889
    #     equation (1) disk sequence: lg_LTIR = 1.31 * lg_MH2 - 2.09
    #                  starburst seq: lg_LTIR = 1.31 * lg_MH2 - 2.09 + 1.1  (1.1 dex see caption of figure 1)
    #                  and they are using alpha_CO = 3.6 for BzK, 4.6 for local spirals, 0.8 for local LRG/SMG
    # 
    if($?1==0){print 'Usage: calc_Daddi2010_CO LTIR [CO_J_up z SB SB] --> LCO10\n' {} return}
    if($?4){set _Daddi2010_starbursty = float($4)} else {set _Daddi2010_starbursty = ($1)*0.0}
    if($?5){set _Daddi2010_excitation = float($5)} else {set _Daddi2010_excitation = _Daddi2010_starbursty}
    ##if($?2){set _Daddi2010_Jupper = $2} else {set _Daddi2010_Jupper = 1}
    set _Daddi2010_LumTIR = $1
    set _Daddi2010_PosID = 0,dimen(_Daddi2010_LumTIR)-1 set _Daddi2010_PosID = _Daddi2010_PosID if(_Daddi2010_LumTIR>0)
    if(dimen(_Daddi2010_PosID)==0){print 'calc_Daddi2010_CO: Error! Input data array has no positive value! ' {} return}
    set _Daddi2010_Mmol_Disc = _Daddi2010_LumTIR * 0 
    set _Daddi2010_Mmol_SBst = _Daddi2010_LumTIR * 0 
    set _Daddi2010_Mmol_Disc[_Daddi2010_PosID] = 10**((lg(_Daddi2010_LumTIR[_Daddi2010_PosID])+2.09)/1.31)
    set _Daddi2010_Mmol_SBst[_Daddi2010_PosID] = 10**((lg(_Daddi2010_LumTIR[_Daddi2010_PosID])+2.09-1.1)/1.31) # SBrst shifted 1.1 dex
    if(dimen(_Daddi2010_starbursty)>1) {set _Daddi2010_starbursty = _Daddi2010_starbursty[_Daddi2010_PosID]}
    set _Daddi2010_LPrmCO = (1.0-_Daddi2010_starbursty)*_Daddi2010_Mmol_Disc/4.6 + _Daddi2010_starbursty*_Daddi2010_Mmol_SBst/0.8
    set _Daddi2010_FluxCO = _Daddi2010_LPrmCO*0.0
    if(1==1) { 
        set _Daddi2010_Jupper = _Daddi2010_LumTIR*0+1
        set _Daddi2010_Jscale = _Daddi2010_LumTIR*0+1.0
        if($?3) { if($3>0) {
            define _Daddi2010_Verbose $verbose verbose 0
            set _Daddi2010_FreqCO = _Daddi2010_LumTIR*0+calc_line_freq(co,1,0) # FreqCO is restframe
            set _Daddi2010_LumDist = calc_lumdist($3)
            set _Daddi2010_FluxCO[_Daddi2010_PosID] = convert_lprm2flux($3,_Daddi2010_LPrmCO[_Daddi2010_PosID],_Daddi2010_FreqCO,_Daddi2010_LumDist)
            verbose $_Daddi2010_Verbose #undef _Daddi2010_Verbose
        }}
        if($verbose) { 
            #define print_noheader 1
            #print '\ncalc_Daddi2010_CO:\n' {}
            #print '\nL_TIR = %15.7e  L_sun\nJ_CO  = %15d\nL_CO  = %15.7e  K km s-1 pc2\nS_CO  = %15f  Jy km s-1\n' \
            #       {_Daddi2010_LumTIR _Daddi2010_Jupper _Daddi2010_LPrmCO _Daddi2010_FluxCO} 
            #define print_noheader 0
        }
    }
    if($?2) { 
        #<TODO># 
        #<TODO># if we input arg2 -- CO J_upper, then we 
        #<TODO># calculate CO J_upper line luminosity from CO 1-0
        #<TODO># 
        set _Daddi2010_Jupper = _Daddi2010_LumTIR*0+($2)
        set _Daddi2010_Jscale = _Daddi2010_LumTIR*0+1.0
        set _Daddi2010_Jscale = (_Daddi2010_Jupper==1)  ? 1.000+(0.000*_Daddi2010_excitation) : _Daddi2010_Jscale
        set _Daddi2010_Jscale = (_Daddi2010_Jupper==2)  ? 0.760+(0.240*_Daddi2010_excitation) : _Daddi2010_Jscale #<># 0.59/0.193/2**2 see Daddi2015
        set _Daddi2010_Jscale = (_Daddi2010_Jupper==3)  ? 0.420+(0.580*_Daddi2010_excitation) : _Daddi2010_Jscale #<># 0.73/0.193/3**2
        set _Daddi2010_Jscale = (_Daddi2010_Jupper==4)  ? 0.320+(0.680*_Daddi2010_excitation) : _Daddi2010_Jscale #<># 1.00/0.193/4**2
        set _Daddi2010_Jscale = (_Daddi2010_Jupper==5)  ? 0.230+(0.770*_Daddi2010_excitation) : _Daddi2010_Jscale #<># 1.12/0.193/5**2
        set _Daddi2010_Jscale = (_Daddi2010_Jupper==6)  ? 0.120+(0.880*_Daddi2010_excitation) : _Daddi2010_Jscale #<># 0.85/0.193/6**2
        set _Daddi2010_Jscale = (_Daddi2010_Jupper==7)  ? 0.052+(0.948*_Daddi2010_excitation) : _Daddi2010_Jscale #<># 0.50/0.193/7**2
        set _Daddi2010_Jscale = (_Daddi2010_Jupper==8)  ? 0.016+(0.984*_Daddi2010_excitation) : _Daddi2010_Jscale #<># 0.20/0.193/8**2
        ### print {_Daddi2010_Jupper _Daddi2010_Jscale}
        set _Daddi2010_LPrmCO = _Daddi2010_LPrmCO * _Daddi2010_Jscale # note that the LPrm is K km s-1 pc2
        if($?3) { if($3>0) {
            define _Daddi2010_Verbose $verbose verbose 0
            set _Daddi2010_FreqCO = _Daddi2010_LumTIR*0+calc_line_freq(co,$2,0) # FreqCO is restframe
            set _Daddi2010_LumDist = calc_lumdist($3)
            set _Daddi2010_FluxCO[_Daddi2010_PosID] = convert_lprm2flux($3,_Daddi2010_LPrmCO[_Daddi2010_PosID],_Daddi2010_FreqCO,_Daddi2010_LumDist)
            verbose $_Daddi2010_Verbose #undef _Daddi2010_Verbose
        }}
        if($verbose) { 
            #define print_noheader 1
            #print '\nJ_CO  = %15d\nL_CO  = %15.7e  K km s-1 pc2\nS_CO  = %15f  Jy km s-1\n' \
            #       {_Daddi2010_Jupper _Daddi2010_LPrmCO _Daddi2010_FluxCO} 
            #define print_noheader 0
        }
    }
    if($verbose) { print '\n' {} }
    set $0 = _Daddi2010_LPrmCO
    return

calc_Daddi2015_CO54 02
    # calculate the CO luminosity for a given total IR luminosity
    # CO luminosity is in unit of K km s-1 pc2, IR luminosity is in unit of solar luminosity. 
    # input $1 is LTIR (in linear not in log)
    # input $2 is z
    # we use conversion factor IR/CO54 = 2.36 (BzK) Daddi2015
    # 

calc_Genzel2010_CO 05
    # 
    # Genzel 2010 MNRAS -- LFIR/LPrmCO10 = 27 +- 5.6
    #                   -- LTIR = LFIR * 1.3
    #                   -- LTIR/LPrmCO10 = 27*1.3 +- 5.6*1.3
    #                   -- for SF MS type galaxies only
    #                   -- for CO10 only
    # input $1 is LTIR
    # input $2 is J_upper
    # input $3 is z
    # input $4 is starburst-ness: 1.0 for strong SB, 0.0 for MS. Default is 0.0.
    # input $5 is excitation: if unset then same as starburst-ness: 1.0 for thermalized excitation, 0.0 for HERACLES/z2BzK exc. 
    if($?1==0){print 'Usage: calc_Genzel2010_CO LTIR [CO_J_up z SB EXCT] --> LCO10\n' {} return}
    if($?4){set _Genzel2010_starbursty = float($4)} else {set _Genzel2010_starbursty = ($1)*0.0}
    if($?5){set _Genzel2010_excitation = float($5)} else {set _Genzel2010_excitation = _Genzel2010_starbursty}
    ##if($?2){set _Genzel2010_Jupper = $2} else {set _Genzel2010_Jupper = 1}
    set _Genzel2010_LumTIR = $1
    set _Genzel2010_LumFIR = _Genzel2010_LumTIR / 1.3
    set _Genzel2010_PosID = 0,dimen(_Genzel2010_LumFIR)-1 set _Genzel2010_PosID = _Genzel2010_PosID if(_Genzel2010_LumFIR>0)
    if(dimen(_Genzel2010_PosID)==0){print 'calc_Genzel2010_CO: Error! Input data array has no positive value! ' {} return}
    set _Genzel2010_LPrmCO10_Disc = _Genzel2010_LumFIR * 0 
    set _Genzel2010_LPrmCO10_SBst = _Genzel2010_LumFIR * 0 
    set _Genzel2010_LPrmCO10_Disc[_Genzel2010_PosID] = 10**((lg(_Genzel2010_LumFIR[_Genzel2010_PosID])-0.02)/1.15) # Disc
    set _Genzel2010_LPrmCO10_SBst[_Genzel2010_PosID] = 10**((lg(_Genzel2010_LumFIR[_Genzel2010_PosID])-0.63)/1.15) # SBst
    if(dimen(_Genzel2010_starbursty)>1) {set _Genzel2010_starbursty = _Genzel2010_starbursty[_Genzel2010_PosID]}
    set _Genzel2010_LPrmCO = (1.0-_Genzel2010_starbursty)*_Genzel2010_LPrmCO10_Disc + _Genzel2010_starbursty*_Genzel2010_LPrmCO10_SBst
    set _Genzel2010_FluxCO = _Genzel2010_LPrmCO*0.0
    if(1==1) { 
        set _Genzel2010_Jupper = _Genzel2010_LumFIR*0+1
        set _Genzel2010_Jscale = _Genzel2010_LumFIR*0+1.0
        if($?3) { if($3>0) {
            define _Genzel2010_Verbose $verbose verbose 0
            set _Genzel2010_FreqCO = _Genzel2010_LumFIR*0+calc_line_freq(co,1,0) # FreqCO is restframe
            set _Genzel2010_LumDist = calc_lumdist($3)
            set _Genzel2010_FluxCO[_Genzel2010_PosID] = convert_lprm2flux($3,_Genzel2010_LPrmCO[_Genzel2010_PosID],_Genzel2010_FreqCO,_Genzel2010_LumDist)
            verbose $_Genzel2010_Verbose #undef _Genzel2010_Verbose
        }}
        if($verbose) { 
            #define print_noheader 1
            #print '\ncalc_Genzel2010_CO:\n' {}
            #print '\nL_TIR = %15.7e  L_sun\nJ_CO  = %15d\nL_CO  = %15.7e  K km s-1 pc2\nS_CO  = %15f  Jy km s-1\n' \
            #       {_Genzel2010_LumFIR _Genzel2010_Jupper _Genzel2010_LPrmCO _Genzel2010_FluxCO} 
            #define print_noheader 0
        }
    }
    if($?2) { 
        #<TODO># 
        #<TODO># if we input arg2 -- CO J_upper, then we 
        #<TODO># calculate CO J_upper line luminosity from CO 1-0
        #<TODO># 
        set _Genzel2010_Jupper = _Genzel2010_LumFIR*0+($2)
        set _Genzel2010_Jscale = _Genzel2010_LumFIR*0+1.0
        set _Genzel2010_Jscale = (_Genzel2010_Jupper==1)  ? 1.000+(0.000*_Genzel2010_excitation) : _Genzel2010_Jscale
        set _Genzel2010_Jscale = (_Genzel2010_Jupper==2)  ? 0.760+(0.240*_Genzel2010_excitation) : _Genzel2010_Jscale #<># 0.59/0.193/2**2 see Daddi2015
        set _Genzel2010_Jscale = (_Genzel2010_Jupper==3)  ? 0.420+(0.580*_Genzel2010_excitation) : _Genzel2010_Jscale #<># 0.73/0.193/3**2
        set _Genzel2010_Jscale = (_Genzel2010_Jupper==4)  ? 0.320+(0.680*_Genzel2010_excitation) : _Genzel2010_Jscale #<># 1.00/0.193/4**2
        set _Genzel2010_Jscale = (_Genzel2010_Jupper==5)  ? 0.230+(0.770*_Genzel2010_excitation) : _Genzel2010_Jscale #<># 1.12/0.193/5**2
        set _Genzel2010_Jscale = (_Genzel2010_Jupper==6)  ? 0.120+(0.880*_Genzel2010_excitation) : _Genzel2010_Jscale #<># 0.85/0.193/6**2
        set _Genzel2010_Jscale = (_Genzel2010_Jupper==7)  ? 0.052+(0.948*_Genzel2010_excitation) : _Genzel2010_Jscale #<># 0.50/0.193/7**2
        set _Genzel2010_Jscale = (_Genzel2010_Jupper==8)  ? 0.016+(0.984*_Genzel2010_excitation) : _Genzel2010_Jscale #<># 0.20/0.193/8**2
        ### print {_Genzel2010_Jupper _Genzel2010_Jscale}
        set _Genzel2010_LPrmCO = _Genzel2010_LPrmCO * _Genzel2010_Jscale # note that the LPrm is K km s-1 pc2
        if($?3) { if($3>0) {
            define _Genzel2010_Verbose $verbose verbose 0
            set _Genzel2010_FreqCO = _Genzel2010_LumFIR*0+calc_line_freq(co,$2,0) # FreqCO is restframe
            set _Genzel2010_LumDist = calc_lumdist($3)
            set _Genzel2010_FluxCO[_Genzel2010_PosID] = convert_lprm2flux($3,_Genzel2010_LPrmCO[_Genzel2010_PosID],_Genzel2010_FreqCO,_Genzel2010_LumDist)
            verbose $_Genzel2010_Verbose #undef _Genzel2010_Verbose
        }}
        if($verbose) { 
            #define print_noheader 1
            #print '\nJ_CO  = %15d\nL_CO  = %15.7e  K km s-1 pc2\nS_CO  = %15f  Jy km s-1\n' \
            #       {_Genzel2010_Jupper _Genzel2010_LPrmCO _Genzel2010_FluxCO} 
            #define print_noheader 0
        }
    }
    if($verbose) { print '\n' {} }
    set $0 = _Genzel2010_LPrmCO
    return

calc_Liu2015_CO 03
    # 
    # calculate the multiple CO line luminosities for a given total IR luminosity 
    # calc_Liu2015_CO LTIR CO_J_up z
    # 
    if($?1==0||$?2==0){print 'Usage: calc_Liu2015_CO LTIR J_up [z] --> LCO_J_up\n' {} return}
    if($2<1||$2>12){print 'calc_Liu2015_CO: Error! we only support CO(4-3) to CO(12-11), sorry!\n' {} return}
    set _Liu2015_LumTIR = $1
    set _Liu2015_LumFIR = _Liu2015_LumTIR/1.3 # convert TIR to FIR
    set _Liu2015_PosID = 0,dimen(_Liu2015_LumFIR)-1 set _Liu2015_PosID = _Liu2015_PosID if(_Liu2015_LumFIR>0)
    if($?2){set _Liu2015_Jupper = _Liu2015_LumFIR*0+($2)} else {set _Liu2015_Jupper = _Liu2015_LumFIR*0+1}
    if(dimen(_Liu2015_PosID)==0){print 'calc_Liu2015_CO: Error! Input data array has no positive value!' {} return}
    set _Liu2015_N = 0.0 set _Liu2015_A = 0.0
    #if($2==1)  {set _Liu2015_N = 1.06 set _Liu2015_A = 1.49} #<TODO># using CO(4-3) as a lower limit for now
    #if($2==2)  {set _Liu2015_N = 1.06 set _Liu2015_A = 1.49} #<TODO># using CO(4-3) as a lower limit for now
    #if($2==3)  {set _Liu2015_N = 1.06 set _Liu2015_A = 1.49} #<TODO># using CO(4-3) as a lower limit for now
    #if($2==4)  {set _Liu2015_N = 1.06 set _Liu2015_A = 1.49}
    #if($2==5)  {set _Liu2015_N = 1.07 set _Liu2015_A = 1.71}
    #if($2==6)  {set _Liu2015_N = 1.10 set _Liu2015_A = 1.79}
    #if($2==7)  {set _Liu2015_N = 1.03 set _Liu2015_A = 2.62}
    #if($2==8)  {set _Liu2015_N = 1.02 set _Liu2015_A = 2.82}
    #if($2==9)  {set _Liu2015_N = 1.01 set _Liu2015_A = 3.10}
    #if($2==10) {set _Liu2015_N = 0.96 set _Liu2015_A = 3.67}
    #if($2==11) {set _Liu2015_N = 1.00 set _Liu2015_A = 3.51}
    #if($2==12) {set _Liu2015_N = 0.99 set _Liu2015_A = 3.83}
    if($2==1)  {set _Liu2015_N = 1.00 set _Liu2015_A = 1.96} #<TODO># using CO(4-3) as a lower limit for now
    if($2==2)  {set _Liu2015_N = 1.00 set _Liu2015_A = 1.96} #<TODO># using CO(4-3) as a lower limit for now
    if($2==3)  {set _Liu2015_N = 1.00 set _Liu2015_A = 1.96} #<TODO># using CO(4-3) as a lower limit for now
    if($2==4)  {set _Liu2015_N = 1.00 set _Liu2015_A = 1.96}
    if($2==5)  {set _Liu2015_N = 1.00 set _Liu2015_A = 2.27}
    if($2==6)  {set _Liu2015_N = 1.00 set _Liu2015_A = 2.56}
    if($2==7)  {set _Liu2015_N = 1.00 set _Liu2015_A = 2.86}
    if($2==8)  {set _Liu2015_N = 1.00 set _Liu2015_A = 3.04}
    if($2==9)  {set _Liu2015_N = 1.00 set _Liu2015_A = 3.20}
    if($2==10) {set _Liu2015_N = 1.00 set _Liu2015_A = 3.38}
    if($2==11) {set _Liu2015_N = 1.00 set _Liu2015_A = 3.56}
    if($2==12) {set _Liu2015_N = 1.00 set _Liu2015_A = 3.77}
    set _Liu2015_FluxCO = _Liu2015_LumFIR*0+0.0
    set _Liu2015_LPrmCO = _Liu2015_LumFIR*0+0.0
    set _Liu2015_LPrmCO[_Liu2015_PosID] = 10**((lg(_Liu2015_LumFIR[_Liu2015_PosID])-_Liu2015_A)/_Liu2015_N)
    if($?3) { if($3>0) { 
        define _Liu2015_Verbose $verbose verbose 0
        set _Liu2015_FreqCO = _Liu2015_LumFIR*0 + calc_line_freq(co,$2,0) # FreqCO is restframe
        set _Liu2015_LumDist = calc_lumdist($3) 
        set _Liu2015_FluxCO[_Liu2015_PosID] = convert_lprm2flux($3,_Liu2015_LPrmCO[_Liu2015_PosID],_Liu2015_FreqCO,_Liu2015_LumDist)
        verbose $_Liu2015_Verbose undef _Liu2015_Verbose
    }}
    if($verbose) { 
        #define print_noheader 1
        #print '\ncalc_Liu2015_CO:\n' {}
        #print '\nL_TIR = %15.7e  L_sun\nL_FIR = %15.7e  L_sun\nJ_CO  = %15d\nL_CO  = %15.7e  K km s-1 pc2\nS_CO  = %15f  Jy km s-1\n\n' \
        #       {_Liu2015_LumTIR _Liu2015_LumFIR _Liu2015_Jupper _Liu2015_LPrmCO _Liu2015_FluxCO}
        #define print_noheader 0
    }
    set $0 = _Liu2015_LPrmCO

convert_flux2lprm 04
    # convert flux [Jy km/s] to lumin prime [K km s-1 pc2]
    if($?1==0||$?2==0||$?3==0){print 'Usage: set lprm = convert_flux2lprm(z,LineFPrm,restfreq[,lumdist])' {}
                               print ' => output: LPrmCO in unit of K km s-1 pc2\n' {} return}
    set _lprm2flux_z = $1
    set _lprm2flux_fff = $2
    set _lprm2flux_nu = $3
    if(sum(_lprm2flux_z<=0)>0) {print 'Error! Input redshift is non-positive!\n' {} return}
    if(sum(_lprm2flux_nu<=0)>0) {print 'Error! Input rest frequency is non-positive!\n' {} return}
    declare _lprm2flux_dL 0
    if($?4) { if(is_vector($4)) {if(dimen($4)==dimen(_lprm2flux_z)) {set _lprm2flux_dL = $4}} \
              else {if($4>0) {set _lprm2flux_dL = _lprm2flux_z*0.0+$4}} }
    if(dimen(_lprm2flux_dL)==0) { 
        define _lprm2flux_verbose $verbose verbose 0
        !echo "\# lumdist " > ".lprm2flux.lumdist.tmp"
        do _lprm2flux_i=0,dimen(_lprm2flux_z)-1 {
        !lumdist -simple $(_lprm2flux_z[$_lprm2flux_i]) >> ".lprm2flux.lumdist.tmp"
        }
        data ".lprm2flux.lumdist.tmp" read {_lprm2flux_dL 1} verbose $_lprm2flux_verbose
        !rm ".lprm2flux.lumdist.tmp"
    }
    set _lprm2flux_LLL = _lprm2flux_fff * 3.25e7 * _lprm2flux_dL**2 / _lprm2flux_nu**2 / (1.0+_lprm2flux_z)
    if($verbose&&is_vector(LineLPrm)){
        print 'astroSfig::convert_lprm2flux: Warning! Overwriting LineLPrm (backuped existing LineLPrm as LineLPrm_backup\n' {} 
        set LineLPrm_backup = LineLPrm
    }
    if($verbose&&is_vector(LineFlux)){
        print 'astroSfig::convert_lprm2flux: Warning! Overwriting LineFlux (backuped existing LineFlux as LineFlux_backup\n' {} 
        set LineFlux_backup = LineFlux
    }
    set LineLPrm = _lprm2flux_LLL
    set LineFlux = _lprm2flux_fff
    set lumdist = _lprm2flux_dL
    set $0 = LineLPrm
    return

convert_lprm2flux 04
    # convert lumin prime [K km s-1 pc2] to flux [Jy km/s]
    if($?1==0||$?2==0||$?3==0){print 'Usage: set flux = convert_lprm2flux(z,LineLPrm,restfreq[,lumdist])' {}
                               print ' => output: fCO [require command lumdist]\n' {} return}
    set _lprm2flux_z = $1
    set _lprm2flux_L = $2
    set _lprm2flux_nu = $3
    if(sum(_lprm2flux_z<=0)>0) {print 'Error! Input redshift is non-positive!\n' {} return}
    if(sum(_lprm2flux_nu<=0)>0) {print 'Error! Input rest frequency is non-positive!\n' {} return}
    declare _lprm2flux_dL 0
    if($?4) { if(is_vector($4)) {if(dimen($4)==dimen(_lprm2flux_z)) {set _lprm2flux_dL = $4}} \
              else {if($4>0) {set _lprm2flux_dL = _lprm2flux_z*0.0+$4}} }
    if(dimen(_lprm2flux_dL)==0) { 
        define _lprm2flux_verbose $verbose verbose 0
        !echo "\# lumdist " > ".lprm2flux.lumdist.tmp"
        do _lprm2flux_i=0,dimen(_lprm2flux_z)-1 {
        !lumdist -simple $(_lprm2flux_z[$_lprm2flux_i]) >> ".lprm2flux.lumdist.tmp"
        }
        data ".lprm2flux.lumdist.tmp" read {_lprm2flux_dL 1} verbose $_lprm2flux_verbose
        !rm ".lprm2flux.lumdist.tmp"
    }
    set _lprm2flux_f = _lprm2flux_L / 3.25e7 / _lprm2flux_dL**2 * _lprm2flux_nu**2 * (1.0+_lprm2flux_z)
    if($verbose&&is_vector(LineLPrm)){
        print 'astroSfig::convert_lprm2flux: Warning! Overwriting LineLPrm (backuped existing LineLPrm as LineLPrm_backup\n' {} 
        set LineLPrm_backup = LineLPrm
    }
    if($verbose&&is_vector(LineFlux)){
        print 'astroSfig::convert_lprm2flux: Warning! Overwriting LineFlux (backuped existing LineFlux as LineFlux_backup\n' {} 
        set LineFlux_backup = LineFlux
    }
    set LineLPrm = _lprm2flux_L
    set LineFlux = _lprm2flux_f
    set lumdist = _lprm2flux_dL
    set $0 = LineFlux
    return

convert_GHz2kms 02
    # 
    if($?1==0||$?2==0){print 'Usage: convert_GHz2kms GHz0 GHz => output: kms\n' {} return}
    set _GHz2kms_GHz0 = $1
    set _GHz2kms_GHz = $2
    set _GHz2kms_kms = (_GHz2kms_GHz)/(_GHz2kms_GHz0)*2.99792458e5
    echo convert_GHz2kms: $(_GHz2kms_GHz) GHz at $(_GHz2kms_GHz0) GHz is $(_GHz2kms_kms) km/s
    set $0 = _GHz2kms_kms

calc_lumdist 01
    # use spline to calc lumdist
    set _calc_lumdist_z = 0.00,8.00,0.25
    set _calc_lumdist_dL = {0.00000 1215.03 2745.16 4510.80 6452.30 8527.46 10706.9 12970.0 15301.8 17691.5 \
                            20130.7 22613.1 25133.5 27687.9 30272.8 32885.3 35523.2 38184.2 40866.7 43569.1 \
                            46289.9 49028.1 51782.5 54552 57336 60133.5 62943.8 65766.3 68600.4 71445.5 74301.2 \
                            77166.8 80042.1}
    # print '%10.1f %12.3f\n' {_calc_lumdist_z _calc_lumdist_dL}
    set _calc_lumdist_iz = $1
    spline _calc_lumdist_z _calc_lumdist_dL _calc_lumdist_iz _calc_lumdist_oL 
    set $0 = _calc_lumdist_oL
    return

calc_sint 06
    # calc any 1D numerical integration
    if($?1==0||$?2==0) {print 'usage: set sint = calc_sint(x,y[,x1,x2,step])' {} return}
    set _csint_x = $1
    set _csint_y = $2
    vecminmax _csint_x _csint_xMIN _csint_xMAX
    if($?3) {set _csint_x1 = $3} else {set _csint_x1 = $_csint_xMIN}
    if($?4) {set _csint_x2 = $4} else {set _csint_x2 = $_csint_xMAX}
    if($?5) {set _csint_dx = $5} else {set _csint_dx = (_csint_x2-_csint_x1)/100.0}
    set _csint_xgo = $(_csint_x1),$(_csint_x2),$(_csint_dx)
    interp2 _csint_x _csint_y _csint_xgo _csint_ygo
    set _csint_int = sum(_csint_ygo*_csint_dx)
    set $0 = _csint_int

calc_ltir 06
    # calc Luminosity TIR
    if($?1==0||$?2==0) {print 'usage: set ltir = calc_ltir(wave_um,flux_mJy,z[,w1_um,w2_um,step_GHz])' {} return}
    # wave flux z
    set _clir_w = $1 # um -- obs wave
    set _clir_f = $2 # mJy -- obs flux 
    if($?3){set _clir_z = $3 set _clir_dL = calc_lumdist(_clir_z)} else {set _clir_z=0.0 set _clir_dL=0.0}
    set _clir_opz = 1.0+_clir_z # 
    set _clir_vfv = _clir_f * 2.99792458e5 / _clir_w # mJy GHz -- monochromatic luminosity
    set _clir_rsw = _clir_w / _clir_opz                # um -- restframe wavelength
    set _clir_rsf = _clir_vfv / 2.99792458e5 * _clir_rsw # mJy -- restframe flux density
    if($?4){set _clir_ww1 = $4} else {set _clir_ww1 = 8.0} # where to begin integration
    if($?5){set _clir_ww2 = $5} else {set _clir_ww2 = 1000.0} # where to begin integration
    if($?6){set _clir_itu = $6} else {set _clir_itu = 0.01} # -_clir_itu GHz interval [GHz]
    set _clir_itv = lg(2.99792458e5/_clir_ww1),lg(2.99792458e5/_clir_ww2),-(_clir_itu) # -_clir_itu GHz interval
    set _clir_itv = 10**_clir_itv # GHz
    set _clir_itw = 2.99792458e5/_clir_itv # um
    set _clir_rsw_int = 2.99792458e5/_clir_itv # um
    ##spline _clir_rsw _clir_rsf _clir_itw _clir_itf
    ##spline _clir_rsw _clir_vfv _clir_rsw_int _clir_vfv_int
    ##echo $(sum(_clir_vfv_int))
    ##echo $(sum(_clir_itf*_clir_itv))
    spline _clir_rsw _clir_vfv _clir_rsw_int _clir_vfv_int
    set _clir_int_lumin = sum(_clir_vfv_int)*_clir_itu/lg(exp(1.0)) # integrated mJy GHz
    set _clir_int_lumin = _clir_int_lumin / 40.31970 # integrated Lsun Mpc-2
    if(_clir_dL>0) {
        set _clir_int_lumin = _clir_int_lumin * 4*pi*_clir_dL**2
        if($verbose) {echo calc_ltir: L_IR_8_1000 = $(_clir_int_lumin) Lsun}
    } else {
        # echo calc_ltir: L_IR_8_1000 = $(_clir_int_lumin) mJy GHz
        if($verbose) {echo calc_ltir: L_IR_8_1000 = 4*pi*dL**2 * $(_clir_int_lumin) Lsun}
    }
    set $0 = _clir_int_lumin

calc_line_z 07
    # calc line redshift
    # e.g. load astroSfig.sm calc_line_z oiii 88 freq0 # central observing frequency
    # e.g. load astroSfig.sm calc_line_z oiii 88 freq1 freq2 # lower and upper observing frequency
    # e.g. load astroSfig.sm calc_line_z oiii 88 ch1 ch2 chan_width freq_resol freq_centre 
    # e.g. load astroSfig.sm calc_line_z oiii 88 73 106 128 0.015625 477.255823
    if($?1==0||$?2==0||$?3==0){print 'Usage: set z = calc_line_z(oiii,88,ch1,ch2,chan_width,freq_resol,freq_centre) => output: z\n' {} return}
    set _line_freq_res = calc_line_freq($1,$2)
    if($?4==0) { set _line_freq_obs = $3 } else { set _line_freq_obs = 0.5*(($3)+($4)) }
    if($?5!=0&&$?6!=0&&$?7!=0) { set _line_chan_obs = (0.5*(($3)+($4))) set _line_chan_cen = (($5)/2)+1
        set _line_freq_resol = $6
        set _line_velo_resol = _line_freq_resol/($7)*2.99792458e5
        set _line_velo_width = float(($4)-($3)+1.0)*(_line_velo_resol)
        set _line_freq_width = float(($4)-($3)+1.0)*(_line_freq_resol)
        set _line_freq_obs = float(_line_chan_obs-_line_chan_cen)*($6) + ($7)
        echo astroSfig::calc_line_z: velocity resolution = $(_line_velo_resol) km/s
        echo astroSfig::calc_line_z: frequency resolution = $(_line_freq_resol) GHz
        echo astroSfig::calc_line_z: line width (FWZM) = $(_line_velo_width) km/s
        echo astroSfig::calc_line_z: freq width (FWZM) = $(_line_freq_width) GHz
        # echo astroSfig::calc_line_z: observing channel of line center is $(_line_chan_obs) 
    }
    set _line_redshift = (_line_freq_res/_line_freq_obs) - 1.0
    echo astroSfig::calc_line_z: observing frequency of line center is $(_line_freq_obs) GHz
    echo astroSfig::calc_line_z: restframe frequency of line center is $(_line_freq_res) GHz
    echo astroSfig::calc_line_z: z = $(sprintf('%0.7f',_line_redshift))
    echo 
    echo z = $(sprintf('%0.7f',_line_redshift))
    echo 
    return

calc_line_chan 07
    # calc line channels
    # e.g. load astroSfig.sm calc_line_chan(oiii,88,z,linewidth,chan_width,freq_resol,freq_centre) # assuming chan_center = chan_width/2+1
    # e.g. load astroSfig.sm calc_line_chan oiii 88 6.1037098 333.7093764 # --> frequency range
    # e.g. load astroSfig.sm calc_line_chan oiii 88 6.1037098 333.7093764 128 0.015625 477.255823
    # e.g. load astroSfig.sm calc_line_chan cii 158 6.1037098 333.7093764 128 0.01562395 267.3126003
    if($?1==0||$?2==0||$?3==0||$?4==0){print 'Usage: set range = calc_line_chan(oiii,88,z,fwhm,chan_width,freq_resol,freq_centre) => output: line_channel_range\n' {} return}
    set _line_freq_obs = calc_line_freq($1,$2,$3)
    set _line_velo_width = $4
    set _line_freq_lower = _line_freq_obs - (_line_velo_width/2.0/2.99792458e5)*(_line_freq_obs)
    set _line_freq_upper = _line_freq_obs + (_line_velo_width/2.0/2.99792458e5)*(_line_freq_obs)
    echo astroSfig::calc_line_chan: line frequency center $(_line_freq_obs) GHz
    echo astroSfig::calc_line_chan: line frequency range $(_line_freq_lower) $(_line_freq_upper) GHz
    if($?5!=0&&$?6!=0&&$?7!=0) { set _line_chan_cen = (($5)/2)+1
        set _line_freq_resol = $6
        set _line_velo_resol = _line_freq_resol/($7)*2.99792458e5
        set _line_chan_lower = ((_line_freq_lower-($7))/_line_freq_resol)+0.5 + _line_chan_cen # the 0.5 channel considers half channel 
        set _line_chan_upper = ((_line_freq_upper-($7))/_line_freq_resol)-0.5 + _line_chan_cen
        set _line_chan_width = ((_line_chan_upper)-(_line_chan_lower)+1.0) # here 1.0 considers two half channel
        set _line_chan_obs = 0.5*(_line_chan_lower+_line_chan_upper)
        echo astroSfig::calc_line_chan: obs- channel center $(_line_chan_cen)
        echo astroSfig::calc_line_chan: line channel center $(_line_chan_obs)
        echo astroSfig::calc_line_chan: line channel width $(_line_chan_width)
        echo astroSfig::calc_line_chan: line channel range $(_line_chan_lower) $(_line_chan_upper)
    }
    return

calc_line_freq 03
    # calc line frequency in observing frame
    if($?1==0||$?2==0){print 'Usage: set uCO10 = calc_line_freq(co,1,6.005) => output: LineFreq\n' {} return}
    set _line_freq = 0.0 # GHz
    if('$1'=='CO'||'$1'=='co'){
        if('$2'=='1')  {set _line_freq = 115.2712018}
        if('$2'=='2')  {set _line_freq = 230.5380000}
        if('$2'=='3')  {set _line_freq = 345.7959899}
        if('$2'=='4')  {set _line_freq = 461.0407682}
        if('$2'=='5')  {set _line_freq = 576.2679305}
        if('$2'=='6')  {set _line_freq = 691.4730763}
        if('$2'=='7')  {set _line_freq = 806.6518060}
        if('$2'=='8')  {set _line_freq = 921.7997000}
        if('$2'=='9')  {set _line_freq = 1036.9123930}
        if('$2'=='10') {set _line_freq = 1151.9854520}
        if('$2'=='11') {set _line_freq = 1267.0144860}
        if('$2'=='12') {set _line_freq = 1381.9951050}
        if('$2'=='13') {set _line_freq = 1496.9229090}
    }
    if('$1'=='OIII'||'$1'=='oiii'){
        if('$2'=='1'||'$2'=='88')  {set _line_freq = 3393.00624}
        if('$2'=='2'||'$2'=='51')  {set _line_freq = 5785.87959}
    }
    if('$1'=='CII'||'$1'=='cii'){
        if('$2'=='2'||'$2'=='158')  {set _line_freq = 1900.53690}
    }
    if($?3) { set _line_freq_z = $3
        set _line_freq = _line_freq / (1.0+_line_freq_z)
    }
    if($verbose&&is_vector(LineFreq)){
        print 'astroSfig::calc_line_freq: Warning! Overwriting LineFreq (backuped existing LineFreq as LineFreq_backup\n' {} 
        set LineFreq_backup = LineFreq
    }
    set LineFreq = _line_freq
    if($?0){set $0 = _line_freq}
    return

calc_jvla_time 03
    # calc jvla time on source to reach given LinePeak at observing LineFreq
    # arg3 is the goal S/N
    if($?1==0||$?2==0){print 'Usage: set oHour = calc_jvla_time(LineFreq,LineFlux) => output: OnSourceHour\n' {} return}
    if($verbose&&is_vector(LineFreq)){
        print 'astroSfig::calc_jvla_time: Warning! Overwriting LineFreq (backuped existing LineFreq as LineFreq_backup\n' {} 
        set LineFreq_backup = LineFreq
    }
    if($verbose&&is_vector(LineFlux)){
        print 'astroSfig::calc_jvla_time: Warning! Overwriting LineFlux (backuped existing LineFlux as LineFlux_backup\n' {} 
        set LineFlux_backup = LineFlux
    }
    if($verbose&&is_vector(LineBand)){
        print 'astroSfig::calc_jvla_time: Warning! Overwriting LineBand (backuped existing LineBand as LineBand_backup\n' {} 
        set LineBand_backup = LineBand
    }
    set LineFreq = $1 # obs freq
    set LineFlux = $2 # Jy km/s
    set LineBand = 'unknown'
    set LineBand = (LineFreq>0.058 && LineFreq<0.084) ? '4'  : LineBand
    set LineBand = (LineFreq>0.23  && LineFreq<0.47)  ? 'P'  : LineBand
    set LineBand = (LineFreq>1.00  && LineFreq<2.00)  ? 'L'  : LineBand
    set LineBand = (LineFreq>2.00  && LineFreq<4.00)  ? 'S'  : LineBand
    set LineBand = (LineFreq>4.00  && LineFreq<8.00)  ? 'C'  : LineBand
    set LineBand = (LineFreq>8.00  && LineFreq<12.0)  ? 'X'  : LineBand
    set LineBand = (LineFreq>12.0  && LineFreq<18.0)  ? 'Ku' : LineBand
    set LineBand = (LineFreq>18.0  && LineFreq<26.5)  ? 'K'  : LineBand
    set LineBand = (LineFreq>26.5  && LineFreq<40.0)  ? 'Ka' : LineBand
    set LineBand = (LineFreq>40.0  && LineFreq<50.0)  ? 'Q'  : LineBand
    set LineWidth = LineFreq * 0.0 + 500.0 # km/s
                                           # <TODO>
    set JyK  =   0.0   # 5.62/eta_A (SEFD = 5.62*Tsys/eta_A = JyK*Tsys)
                       # https://science.nrao.edu/facilities/vla/docs/manuals/oss/performance/sensitivity
    set eta  =  1.00   # the correlator efficiency (~0.93 with the use of the 8-bit samplers)
                       # https://science.nrao.edu/facilities/vla/docs/manuals/oss/performance/sensitivity
    set Tsys =   0.0   # Tsys (SEFD = 5.62*Tsys/eta_A = JyK*Tsys)
                       # https://science.nrao.edu/facilities/vla/docs/manuals/oss/performance/sensitivity
    set JyK  = (LineBand=='P' ) ?   1.00 : JyK    # band P
    set JyK  = (LineBand=='L' ) ?   1.00 : JyK    # band L
    set JyK  = (LineBand=='S' ) ?   1.00 : JyK    # band S
    set JyK  = (LineBand=='C' ) ?   1.00 : JyK    # band C
    set JyK  = (LineBand=='X' ) ?   1.00 : JyK    # band X
    set JyK  = (LineBand=='Ku') ?   1.00 : JyK    # band Ku
    set JyK  = (LineBand=='K' ) ?   1.00 : JyK    # band K
    set JyK  = (LineBand=='Ka') ?   1.00 : JyK    # band Ka
    set JyK  = (LineBand=='Q' ) ?   1.00 : JyK    # band Q
    set eta  = (LineBand=='P' ) ?   0.83 : eta    # band P
    set eta  = (LineBand=='L' ) ?   0.83 : eta    # band L
    set eta  = (LineBand=='S' ) ?   0.83 : eta    # band S
    set eta  = (LineBand=='C' ) ?   0.83 : eta    # band C
    set eta  = (LineBand=='X' ) ?   0.83 : eta    # band X
    set eta  = (LineBand=='Ku') ?   0.83 : eta    # band Ku
    set eta  = (LineBand=='K' ) ?   0.83 : eta    # band K
    set eta  = (LineBand=='Ka') ?   0.50 : eta    # band Ka
    set eta  = (LineBand=='Q' ) ?   0.50 : eta    # band Q
    set Tsys = (LineBand=='P' ) ? 3900.0 : Tsys   # band P
    set Tsys = (LineBand=='L' ) ?  420.0 : Tsys   # band L
    set Tsys = (LineBand=='S' ) ?  370.0 : Tsys   # band S
    set Tsys = (LineBand=='C' ) ?  310.0 : Tsys   # band C
    set Tsys = (LineBand=='X' ) ?  250.0 : Tsys   # band X
    set Tsys = (LineBand=='Ku') ?  230.0 : Tsys   # band Ku -- calibrated summer time 20-50 degree elevation -- 3 bit sampler
    set Tsys = (LineBand=='K' ) ?  415.0 : Tsys   # band K  -- calibrated summer time 20-50 degree elevation -- 3 bit sampler
    set Tsys = (LineBand=='Ka') ?  450.0 : Tsys   # band Ka
    set Tsys = (LineBand=='Q' ) ?  800.0 : Tsys   # band Q
    ### 
    set Tsys = (LineBand=='K' ) ? Tsys+(12.0/(LineFreq-18.00)) : Tsys
    set Tsys = (LineBand=='Ku') ? Tsys+(16.0/(18.00-LineFreq)) : Tsys
    set Tsys = (LineBand=='Ka') ? Tsys+(700./(40.00-LineFreq)) : Tsys
    set Tsys = (LineBand=='Q' ) ? Tsys+(1000/(49.20-LineFreq)) : Tsys
    ### 
    set N_antennas = 25 # use 25 instead of the full total 27 antennas to allow for 
                        # the contingency that not all telescopes are in working order
    set N_an = N_antennas*(N_antennas-1)  # N*(N-1)
    set N_configs = 1     # single config
    set N_cn = N_configs  # single config
    set N_polariz = 2     # dual polar
    set N_po = N_polariz  # dual polar
    set N_bw = LineWidth/2.99792458e5*LineFreq*1e9  # Hz not GHz
    set T_ON = LineFlux*0.0+3600.0                  # 1 hour
    set rms_1si = LineFlux / LineWidth / 1e-3 / 1.0 # mJy
    set rms_3si = LineFlux / LineWidth / 1e-3 / 3.0 # mJy
    set rms_5si = LineFlux / LineWidth / 1e-3 / 5.0 # mJy
    set rms_6si = LineFlux / LineWidth / 1e-3 / 6.0 # mJy
    set rms_10si = LineFlux / LineWidth / 1e-3 / 10.0 # mJy
    if($?3) {set rms_$3""sigma = LineFlux / LineWidth / 1e-3 / float($3)}
    set rms_1hr = JyK * Tsys / (eta*sqrt(N_an*N_cn*N_po*N_bw*T_ON)) * 1e3 # mJy
    set rms_2hr = rms_1hr / sqrt(2.0) # mJy
    set rms_3hr = rms_1hr / sqrt(3.0) # mJy
    if($?3) { set onsource_hr = (rms_1hr / rms_$3""sigma)**2 
     } else { set onsource_hr = (rms_1hr / rms_10si)**2 }
    set on_hr = onsource_hr
    set on_min = onsource_hr * 60.0
    set total_hr = onsource_hr * 1.885
    set total_min = onsource_hr * 1.885 * 60.0
    # print {JyK eta Tsys LineFreq LineFlux LineBand rms_6si rms_1hr rms_2hr rms_3hr on_hr on_min}
    if($?3) { 
        print <LineBand LineFreq LineFlux LineWidth rms_1si rms_$3""sigma on_hr on_min>
    } else {
        print {LineBand LineFreq LineFlux LineWidth rms_1si rms_6si on_hr on_min}
    }
    set $0 = onsource_hr

calc_noema_time 04
    # calc noema time on source to reach given LinePeak at observing LineFreq
    # arg1 is LineFreq [GHz] (obs frame)
    # arg2 is LineFlux [Jy km/s]
    # arg3 is LineWidth [km/s]
    # arg4 is the goal S/N
    if($?1==0||$?2==0||$?3==0){
        print 'Usage: set oHour = calc_noema_time(LineFreq,LineFlux,LineWidth,SNRatio) => output: OnSourceHour\n' {} return }
    if($verbose&&is_vector(LineFreq)){ set LineFreq_backup = LineFreq 
        print 'astroSfig::calc_noema_time: Warning! Overwriting LineFreq (backuped existing LineFreq as LineFreq_backup)\n' {} }
    if($verbose&&is_vector(LineFlux)){ set LineFlux_backup = LineFlux 
        print 'astroSfig::calc_noema_time: Warning! Overwriting LineFlux (backuped existing LineFlux as LineFlux_backup)\n' {} }
    if($verbose&&is_vector(LineBand)){ set LineBand_backup = LineBand 
        print 'astroSfig::calc_noema_time: Warning! Overwriting LineBand (backuped existing LineBand as LineBand_backup)\n' {} }
    ### 
    set LineFreq = $1 # obs freq GHz
    set LineFlux = $2 # Jy km/s
    set LineWidth = $3 # km/s
    set LineBand = (LineFreq*0-99) # 'band3'
    set LineBand = (LineFreq>80  && LineFreq<116) ? 1 : LineBand
    set LineBand = (LineFreq>129 && LineFreq<177) ? 2 : LineBand
    set LineBand = (LineFreq>201 && LineFreq<267) ? 3 : LineBand
    set JyK  = (LineFreq*0)
    set eta  = (LineFreq*0-99)
    set Tsys = (LineFreq*0)
    set JyK  = (LineBand==1) ? 22.0  : JyK   # 2015-08: band 1 80-116 GHz (3mm)
    set eta  = (LineBand==1) ? 0.9   : eta   # 2015-08: band 1 80-116 GHz (3mm)
    set Tsys = (LineBand==1) ? 110.0 : Tsys  # 2015-08: band 1 80-116 GHz (3mm) <TODO> varies from 100K to 170K within band
    set JyK  = (LineBand==2) ? 29.0  : JyK   # 2015-08: band 2 129-177 GHz (2mm)
    set eta  = (LineBand==2) ? 0.85  : eta   # 2015-08: band 2 129-177 GHz (2mm)
    set Tsys = (LineBand==2) ? 140.0 : Tsys  # 2015-08: band 2 129-177 GHz (2mm) <TODO> varies from 130K to 160K within band
    set JyK  = (LineBand==3) ? 35.0  : JyK   # 2015-08: band 3 201-267 GHz (1.3mm)
    set eta  = (LineBand==3) ? 0.8   : eta   # 2015-08: band 3 201-267 GHz (1.3mm)
    set Tsys = (LineBand==3) ? 200.0 : Tsys  # 2015-08: band 3 201-267 GHz (1.3mm) <TODO> seems steady within band
    ### 
    set N_antennas = 7 # 2015-08: NOEMA has 7 antenaae
    set N_an = N_antennas*(N_antennas-1)  # N*(N-1)
    set N_configs = 1     # single config
    set N_cn = N_configs  # single config
    set N_polariz = 2     # dual polar
    set N_po = N_polariz  # dual polar
    set N_bw = LineWidth/2.99792458e5*LineFreq*1e9  # Hz not GHz
    set T_ON = LineFlux*0.0+3600.0                  # 1 hour
    set rms_1si = LineFlux / LineWidth / 1e-3 / 1.0 # mJy
    set rms_3si = LineFlux / LineWidth / 1e-3 / 3.0 # mJy
    set rms_5si = LineFlux / LineWidth / 1e-3 / 5.0 # mJy
    set rms_6si = LineFlux / LineWidth / 1e-3 / 6.0 # mJy
    set rms_10si = LineFlux / LineWidth / 1e-3 / 10.0 # mJy
    if($?4) {set rms_$4""sigma = LineFlux / LineWidth / 1e-3 / float($4)}
    set rms_1hr = JyK * Tsys / (eta*sqrt(N_an*N_cn*N_po*N_bw*T_ON)) * 1e3 # mJy
    set rms_2hr = rms_1hr / sqrt(2.0) # mJy
    set rms_3hr = rms_1hr / sqrt(3.0) # mJy
    if($?4) { set onsource_hr = (rms_1hr / rms_$4""sigma)**2 
     } else { set onsource_hr = (rms_1hr / rms_10si)**2 }
    set on_hr = onsource_hr
    set on_min = onsource_hr * 60.0
    set total_hr = onsource_hr * 1.6
    set total_min = onsource_hr * 1.6 * 60.0
    # print {JyK eta Tsys LineFreq LineFlux LineBand rms_6si rms_1hr rms_2hr rms_3hr on_hr on_min}
    if($verbose) {
      if($?4) { 
        print <LineBand LineFreq LineFlux LineWidth rms_1si rms_$4""sigma on_hr on_min>
      } else {
        print {LineBand LineFreq LineFlux LineWidth rms_1si rms_6si on_hr on_min}
      }
    }
    set $0 = onsource_hr
























calc_nebular_lines 02
    #  line wavelengths are from http://classic.sdss.org/dr7/products/spectra/vacwavelength.html
    #  
    #  usage: 
    #    (1) calc lines given z
    #        load astroSfig.sm calc_nebular_lines 3.044133302
    #    (2) calc z given lines
    #        load astroSfig.sm calc_nebular_lines oiii4959 19481
    #  
    #  for ds9: ds9 -title ds9 -tile mode row -lock frame image GN_15a_maskC1_K_RH_7966_eps.fits GN_15a_maskC1_K_RH_7966_snrs.fits
    #  
    #  
    set _calc_nblines_nom = {"H-beta" "[OIII]4959" "[OIII]5007" "[NII]6548" "H-alpha" "[NII]6583" "[SII]" "[SII]"}
    set _calc_nblines_al1 = {"Hbeta" "OIII4959" "OIII5007" "NII6548" "Halpha" "NII6583" "SII6716" "SII6731"}
    set _calc_nblines_al2 = {"hbeta" "oiii4959" "oiii5007" "nii6548" "halpha" "nii6583" "sii6716" "sii6731"}
    set _calc_nblines_wav = {4861.363 4958.911 5006.843 6548.050 6562.801 6583.450 6716.440 6730.820}
    if($?1 && $?2) {
      do _calc_nblines_k=0,dimen(_calc_nblines_nom)-1 {
        set _calc_nblines_srt = sprintf('%s',_calc_nblines_nom[$_calc_nblines_k])
        set _calc_nblines_sr1 = sprintf('%s',_calc_nblines_al1[$_calc_nblines_k])
        set _calc_nblines_sr2 = sprintf('%s',_calc_nblines_al2[$_calc_nblines_k])
        if(index(_calc_nblines_srt,'$1')>=0 || index(_calc_nblines_sr1,'$1')>=0 || index(_calc_nblines_sr2,'$1')>=0) {
            set _calc_nblines_z = float($2) / _calc_nblines_wav[$_calc_nblines_k] - 1.0
            if(_calc_nblines_z<=0.0){print 'Error! Got non-positive redshift when calc_nebular_lines $1 $2\n' {} return}
        }
      }
    } else {
        if($?1) { set _calc_nblines_z = $1 } else { 
            print 'Error! Usage: load astroSfig.sm calc_nebular_lines 3.044133302\n' {} return }
    }
    set _calc_nblines_opz = 1.0+_calc_nblines_z
    echo ""
    do _calc_nblines_i=0,dimen(_calc_nblines_z)-1 {
      echo "z = "$(sprintf('%0.5f',_calc_nblines_z[$_calc_nblines_i]))
      do _calc_nblines_k=0,dimen(_calc_nblines_nom)-1 {
        set _calc_nblines_srt = sprintf('%-12s',_calc_nblines_nom[$_calc_nblines_k])
        set _calc_nblines_str = sprintf('%0.5f',_calc_nblines_wav[$_calc_nblines_k]*_calc_nblines_opz[$_calc_nblines_i])
        echo $(_calc_nblines_srt)"  = "$(_calc_nblines_str)
      }
    }
    do _calc_nblines_i=0,dimen(_calc_nblines_z)-1 {
      do _calc_nblines_k=0,dimen(_calc_nblines_nom)-1 {
        set _calc_nblines_srt = sprintf('%s',_calc_nblines_nom[$_calc_nblines_k])
        set _calc_nblines_str = sprintf('%0.5f',_calc_nblines_wav[$_calc_nblines_k]*_calc_nblines_opz[$_calc_nblines_i])
        echo "echo \"fk5; circle "$(_calc_nblines_str)" 0 10 # text={"$(_calc_nblines_srt)"} font={times 24}\" | xpaset ds9 regions"
        !     echo  "fk5';' circle "$(_calc_nblines_str)" 0 10 '#' text={"$(_calc_nblines_srt)"} font={times 24} " | xpaset ds9 regions 
      }
    }
    echo ""































