RunGalfit 04
    # 
    #  Input:
    #      field band rebuild
    # 
    #  Example: 
    #      load AstroDepthRunGalfit_v3.sm RunGalfit goodss 24 201500 
    #      load AstroDepthRunGalfit_v3.sm RunGalfit goodss 24 201500 rebuild
    # 
    #  Supplementary Files: 
    #  
    
    ############################
    ### Input Argument Check ###
    ############################
    if($?1==0||$?2==0){
    print 'Example: macro read AstroDepthRunGalfit_v3.sm RunGalfit goodsn 24 fitPos [rebuild]\n' {}
    return
    }
    
    
    #  ###################################
    #  ### Please Set Data Information ###
    #  ###################################
    #  # set BackDir = {"/Users/dliu/Temp/dzliu_goodsn/Tool/Photometry"} # not too long, no white space, no trailing slash
    #  set DataDir = {"/data/AstroDepth/"}+sprintf('%s','$1')          # not too long, no white space, no trailing slash
    # #set Catalog = DataDir+{"/Catalog/Initial_Catalog"}+sprintf('_%s','$1')+sprintf('_%s.dat','$2')            # please make sure Catalog exists
    #  set Catalog = DataDir+{"/Catalog/Initial_Catalog"}+sprintf('_%s','$1')+sprintf('_%s_WithNewObj.dat','$2') # please make sure Catalog exists
    # #set PfitCsv = DataDir+{"/Photometry/Result_Photometry"}+sprintf('_%s','$1')+sprintf('_%s.txt','$2')
    #  set PfitCsv = DataDir+{"/Photometry/Result_Photometry"}+sprintf('_%s','$1')+sprintf('_%s_WithNewObj.txt','$2')
    # #set boxRoot = DataDir+{"/Photometry/20150430_fixPos"}
    # #set boxRoot = DataDir+{"/Photometry/20150430_fitPos"}
    #  set boxRoot = DataDir+{"/Photometry/20150430_WithNewObj"}
    #  set boxBand = '$2'
    #  set boxName = {"boxgalfit"}
    #  set boxPath = boxRoot+{"/doing"}+string(boxBand)+{"/"}+boxName
    
    
    ########################################
    ### Set Data Info and Check Software ###
    ########################################
    load AstroDepthSetDataInfo_v3.sm SetDataInfo $1 $2 $3
    set boxName = PfitBox
    set boxPath = PfitDir
    
    
    #################################
    ### Load AstroDepth Constants ###
    #################################
    #load astroGalbox.sm
    #load astroGalfit.sm
    #load astroPhot.sm
    #set_$1""_photometry_constants_""$2
    
    
    #################################
    ### Deploy Catalog and Images ###
    #################################
    astroGalbox_cd boxPath
    !echo Current directory \$(pwd -P) # 
    if(!is_file($(Catalog))){print 'Error! $(Catalog) not found!\n' {} return}
    if(!$?4 || !is_file($SciPhoto_$(boxBand).fits)) {
    astroGalbox_find_and_copy $DirPhoto_$(boxBand) $SciPhoto_$(boxBand).fits
    astroGalbox_find_and_copy $DirPhoto_$(boxBand) $RmsPhoto_$(boxBand).fits
    astroGalbox_find_and_copy $DirPhoto_$(boxBand) $PsfPhoto_$(boxBand).fits
    }
    if(!is_file($SciPhoto_$(boxBand).fits)){print 'Error! $SciPhoto_$(boxBand).fits not found!\n' {} return}
    if(!is_file($RmsPhoto_$(boxBand).fits)){print 'Error! $RmsPhoto_$(boxBand).fits not found!\n' {} return}
    if(!is_file($PsfPhoto_$(boxBand).fits)){print 'Error! $PsfPhoto_$(boxBand).fits not found!\n' {} return}
    !echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    !echo boxRoot = $(boxRoot)
    !echo boxPath = $(boxPath)
    !echo Catalog = $(Catalog)
    !echo SciPhoto = $SciPhoto_$(boxBand).fits
    !echo RmsPhoto = $RmsPhoto_$(boxBand).fits
    !echo PsfPhoto = $PsfPhoto_$(boxBand).fits
    !echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    
    
    if(!$?4) {
        
        readCatalog
        
        freezeSources $1 $2 # use SED_predictions to fix some very faint sources
        # freezeSources will freeze the magnitude of some very faint sources
        # pmG = 0 will freeze the magnitude in astroGalbox.sm
        
        writeResults
        
        set boxBuff = $gBuff_$(boxBand) + $fBuff_$(boxBand)
        astroGalbox_make_boxes $SciPhoto_$(boxBand).fits $xStep_$(boxBand) $yStep_$(boxBand) \
                               $(boxBuff) $(boxBuff) # inp: pxF pyF --> out: PosX PosY
        
    }
    
    
    if(1==0) {
        ##########################################################
        # rsyncdir $(boxPath) "/upgal/Temp/boxgalfit"
        # ssh planer; cd /dsm/upgal/data/dliu/Temp/boxgalfit/
        # /dsm/upgal/data/dliu/Software/galfit/do_GalfitRunqsub
        # rsyncdir "/upgal/Temp/boxgalfit" $(boxPath)
        ##########################################################
    }
    
    
    if($?4) {
        
        readCatalog
        
        set boxBuff = $gBuff_$(boxBand) + $fBuff_$(boxBand)
        astroGalbox_read_boxes $SciPhoto_$(boxBand).fits $xStep_$(boxBand) $yStep_$(boxBand) \
                               $(boxBuff) $(boxBuff) # inp: --> out: astroGalbox_ResultXXXX
        set      x$(boxBand) = astroGalbox_ResultPosX #<added><20150430><dzliu># CAN NOT DO THIS BECAUSE PosX IS IN SMALL BOX
        set      y$(boxBand) = astroGalbox_ResultPosY #<added><20150430><dzliu># CAN NOT DO THIS BECAUSE PosX IS IN SMALL BOX
        set       id$(boxBand) = astroGalbox_ResultIObj
        set      rms$(boxBand) = astroGalbox_ResultRmsPix
        set        m$(boxBand) = astroGalbox_ResultMags
        set       em$(boxBand) = astroGalbox_ResultMagsErr
        set     fRes$(boxBand) = astroGalbox_ResultResPix #<added><20150430><dzliu>#
        set closeDis$(boxBand) = astroGalbox_ResultCloDis #<added><20150430><dzliu>#
        convert_mag2flux $1 $(boxBand) m$(boxBand) em$(boxBand) # convert mag to flux --> output f_$(boxBand) df_$(boxBand)
        
        writeResults
        
        # see also run_rebuild_map.sm
        set boxBuff = $gBuff_$(boxBand) + $fBuff_$(boxBand)
        astroGalbox_mosaic_boxes $SciPhoto_$(boxBand).fits $xStep_$(boxBand) $yStep_$(boxBand) \
                                 $(boxBuff) $(boxBuff)
        # run cl under current directory
        !cl < "rebuild_mosaic_model.cl"
        !cl < "rebuild_mosaic_residual.cl"
        !echo ""
        !echo "cd \$(pwd)"
        !echo "ds9mcc "$SciPhoto_$(boxBand)".fits rebuild_mosaic_model.fits rebuild_mosaic_residual.fits"
        !echo ""
        
    }
    
    
    
    # 
    # BACK
    # 
    # chdir $(BackDir)
    !echo 
    !echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    !echo 
    !echo Current directory \$(pwd -P) # 
    
    # 
    # END
    # 















readCatalog 00
    # if($?Catalog==0) {
    #     print 'readCatalog: vector Catalog does not exist!\n' {} return
    # }
    if(is_vector(Catalog)==0) {
        print 'readCatalog: vector Catalog does not exist!\n' {} return
    } else {
        data $(Catalog) read {idF 1 raF 2 deF 3}
        print 'readCatalog: read $(dimen(idF)) sources from $(Catalog)\n' {}
        # convert_ad2xy
        convert_ad2xy $SciPhoto_$(boxBand).fits raF deF \
                      $xBias_$(boxBand) $yBias_$(boxBand) $(boxBand)
                      # output sky2xy_x sky2xy_y
    }
    if(1==1) { # columns should be: x y rms m em id ra de f df
        # write preliminary results
        set x$(boxBand)   = sky2xy_x
        set y$(boxBand)   = sky2xy_y
        set rms$(boxBand) = sky2xy_x*0.0
        set m$(boxBand)   = sky2xy_x*0.0
        set em$(boxBand)  = sky2xy_x*0.0
        set f$(boxBand)   = sky2xy_x*0.0
        set df$(boxBand)  = sky2xy_x*0.0
        set id$(boxBand)  = idF
        set ra$(boxBand)  = raF
        set de$(boxBand)  = deF
        set pxF = sky2xy_x # the input argument for astroGalbox.sm
        set pyF = sky2xy_y # the input argument for astroGalbox.sm
        backupResults
        print $(PfitCsv) '%15.3f%15.3f%15g%15g%15g%15.0f%15.7f%15.7f%15g%15g\n' \
            <x$(boxBand) y$(boxBand) rms$(boxBand) m$(boxBand) em$(boxBand) id$(boxBand) ra$(boxBand) de$(boxBand) f$(boxBand) df$(boxBand)>
    }


readResults 00
    if(is_vector(PfitCsv)==0) {
        print 'readResults: vector PfitCsv does not exist yet! \n' {} return
    }
    if(is_file($(PfitCsv))==0) {
        print 'readResults: PfitCsv file does not exist yet! Please run galfit_build first!\n' {} return
    }
    if(1==1) { # columns should be: x y rms m em id ra de f df
        data $(PfitCsv) read <x$(boxBand) 1 y$(boxBand) 2 rms$(boxBand) 3 m$(boxBand) 4 em$(boxBand) 5>
        data $(PfitCsv) read <id$(boxBand) 6 ra$(boxBand) 7 de$(boxBand) 8 f$(boxBand) 9 df$(boxBand) 10>
        print 'readResults: read $(dimen(id$(boxBand))) sources from $(PfitCsv)\n' {}
    }


writeResults 00
    if(is_vector(PfitCsv)==0) {
        print 'writeResults: vector PfitCsv does not exist yet! \n' {} return
    }
    if(is_file($(PfitCsv))==1) {
        backupResults
    }
    if(1==1) { # columns should be: x y rms m em id ra de f df
        print $(PfitCsv) '%15.3f%15.3f%15g%15g%15g%15.0f%15.7f%15.7f%15g%15g\n' \
            <x$(boxBand) y$(boxBand) rms$(boxBand) m$(boxBand) em$(boxBand) id$(boxBand) \
            ra$(boxBand) de$(boxBand) f$(boxBand) df$(boxBand)>
               # now also write an idl program to rebuild the big image and residual
        print $(PfitCsv)".res.pro" '; qsub -IX -l walltime=72:00:00 -l mem=32GB\n' {}
        print+$(PfitCsv)".res.pro" '; module load \n' {}
        print+$(PfitCsv)".res.pro" 'cd, \"$(boxPath)\"\n' {}
        print+$(PfitCsv)".res.pro" 'postGalfitResidual, ' {}
        print+$(PfitCsv)".res.pro" '\"$(PfitCsv)\", ' {}
        print+$(PfitCsv)".res.pro" '\"$(boxPath)/$SciPhoto_$(boxBand).fits\", ' {}
        print+$(PfitCsv)".res.pro" '\"$(boxPath)/$RmsPhoto_$(boxBand).fits\", ' {}
        print+$(PfitCsv)".res.pro" '\"$(boxPath)/$PsfPhoto_$(boxBand).fits\"\n' {}
    }


backupResults 00
    if(is_file($(PfitCsv))==1) {
        set PfitCsv_i = 0
        set PfitCsv_f = 1
        while {PfitCsv_f==1 || PfitCsv_i==0} {
            set PfitCsv_i = PfitCsv_i + 1 
            set PfitCsv_s = PfitCsv+{"."}+sprintf('%02d',PfitCsv_i)
            DEFINE exit_status DELETE !test -f $(PfitCsv_s)
            set PfitCsv_f = ($exit_status == 0)
        }
        print 'writeResults: PfitCsv file already exists! We will backup it as $(PfitCsv_s)!\n' {} 
        !\cp $(PfitCsv) $(PfitCsv_s)
    }






freezeSources 02
    # 
    #  We will freeze some faint galaxies by their SED flux
    # 
    #  We will automatically search DataDir/
    # 
    if($?1==0||$?2==0){
        print 'Usage: freezeSources goodsn 24\n' {} 
        define errorbreak 1
        define errorbreak ?
        return
    }
    # 
    # vary position 
    set pxG = x$2*0   # do not fit pos
    set pyG = x$2*0   # do not fit pos
    set pmG = x$2*0+1 # fit mag
    # return
    # 
    # <TODO><20151214>
    # 
    if('$2'=='24'||'$2'=='16') {
        set pxG = pxG*0+1.0  echo set pxG = pxG*0+1.0
        set pyG = pyG*0+1.0  echo set pyG = pyG*0+1.0
        set pmG = pmG*0+1.0  echo set pmG = pmG*0+1.0
        return
    }
    if('$2'=='20cm') {
        set pxG = pxG*0+2.0  echo set pxG = pxG*0+2.0 
        set pyG = pyG*0+2.0  echo set pyG = pyG*0+2.0
        set pmG = pmG*0+1.0  echo set pmG = pmG*0+1.0
        return
    }
    if('$2'=='100'||'$2'=='160') {
        set pxG = pxG*0+1.0 
        set pyG = pyG*0+1.0
        # go SED preselection
    }
    if('$2'=='250') {
        set pxG = pxG*0+0.3 
        set pyG = pyG*0+0.3
        # go SED preselection
    }
    if('$2'=='350'||'$2'=='500') {
        # go SED preselection
    }
    if('$2'=='1160') {
        # go SED preselection
    }
    # 
    # read SED predictions
    set PfitSED_prediction = DataDir+{"/SED/SED_predictions"}+sprintf('_%s','$1')+sprintf('_%s.txt','$2')
    if(!is_file($(PfitSED_prediction))){
        print 'freezeSources:Error! PfitSED_prediction $(PfitSED_prediction) not found! Give Ctrl+C to break!\n' {} 
        define errorbreak 1
        define errorbreak ?
        return
    }
    if($verbose){define freeze_verbose 1} else{define freeze_verbose 0}
    data $(PfitSED_prediction) read < exc$(boxBand) 4 xf$(boxBand) 7 xe$(boxBand) 8 >
    verbose $freeze_verbose
    # <added><20150515><dzliu> additional new objects selected from residual maps
    set nObjAdd = 0
    set nObjAdd = (dimen(id$(boxBand))-dimen(exc$(boxBand)))
    if(nObjAdd>0) { 
        set dimen(vObjAdd) = $(nObjAdd)
        set vObjAdd = vObjAdd*0
        set exc$(boxBand) = exc$(boxBand) concat vObjAdd
        set xf$(boxBand) = xf$(boxBand) concat vObjAdd
        set xe$(boxBand) = xe$(boxBand) concat vObjAdd
    }
    # 
    # convert_flux2mag
    load astroPhot.sm convert_flux2mag $1 $2 xf$(boxBand) xe$(boxBand)
    set PfitSED_predict_mag = m$(boxBand) # +- em$(boxBand)
    set PfitSED_predict_mag = PfitSED_predict_mag>25 ? 25 : PfitSED_predict_mag #<corrected><20150503><dzliu>#
    set pmF = exc$(boxBand)? PfitSED_predict_mag : 5.0
    set pmG = 1-exc$(boxBand)
    set pxG = exc$(boxBand)? 0 : pxG #<fixed><20150717><dzliu>#
    set pyG = exc$(boxBand)? 0 : pyG #<fixed><20150717><dzliu>#
    # set pmF and pmG = 0 will let astroGalbox.sm fix these magnitude values
    set m$(boxBand) = exc$(boxBand)? m$(boxBand) : 5.0
    set em$(boxBand) = exc$(boxBand)? em$(boxBand) : 0.0
    # 
    # set pmF and pmG then astroGalbox will use these two vectors 
    # to fix magnitude
    # print {idF xf100 xe100 pmF pmG}









































