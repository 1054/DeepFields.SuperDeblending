crabPlotHistogram 05
    # 
    # quickly make histogram
    # 
    # $1 is output pdf
    # $2 is vector
    # $3 is lower limit
    # $4 is upper limit
    # $5 is interval
    # output histogram_x histogram_y
    # 
    if($?2==0) {
        print 'usage: crabPlotHistogram output_pdf vector lower_limit upper_limit interval\n' {} 
        return
    }
    if($?5) {
        crabPlotHistogramCalculation $2 $3 $4 $5
    } else {
        if($?4) {
            crabPlotHistogramCalculation $2 $3 $4
        } else {
            if($?3) {
                crabPlotHistogramCalculation $2 $3
            } else {
                crabPlotHistogramCalculation $2
            }
        }
    }
    crabPlotHistogram_xy $1 _crabpl_vbase _crabpl_vnumb
    unset _crabpl_vbase
    unset _crabpl_vnumb



crabPlotHistogramPlot 06
    # 
    # make a histogram by given lower_limit upper_limit and interval
    # 
    # $1 is vector
    # $2 is lower limit
    # $3 is upper limit
    # $4 is interval
    # $5 is output pdf
    # $6 is keepopen
    # output histogram_x histogram_y
    # 
    if($?5==0) {
        print 'usage: crabPlotHistogramPlot vector lower_limit upper_limit interval output_pdf keep_open\n' {} 
        return
    } else {
        if($?6) {define crabPlotHistogram_KeepDevice 1}
        crabPlotHistogramCalculation $1 $2 $3 $4
    } 
    crabPlotHistogram_xy $5 _crabpl_vbase _crabpl_vnumb
    unset _crabpl_vbase
    unset _crabpl_vnumb



crabPlotHistogramOverPlot 04
    # 
    # $1 is vector
    # $2 is lower limit
    # $3 is upper limit
    # $4 is interval
    # output histogram_x histogram_y
    # 
    if($?1==0) {
        print 'usage: crabPlotHistogramOverPlot vector lower_limit upper_limit interval\n' {} 
        return
    }
    if($?4) {
        crabPlotHistogramCalculation $1 $2 $3 $4
    } else {
        if($?3) {
            crabPlotHistogramCalculation $1 $2 $3
        } else {
            if($?2) {
                crabPlotHistogramCalculation $1 $2
            } else {
                crabPlotHistogramCalculation $1
            }
        }
    }
    crabPlotHistogram_xy overplot _crabpl_vbase _crabpl_vnumb
    unset _crabpl_vbase
    unset _crabpl_vnumb



crabPlotHistogramGaussianFit 05
    # 
    # $1 is vector
    # $2 is lower limit
    # $3 is upper limit
    # $4 is interval
    # $5 is fixed_width
    # output gaussian_x, gaussian_y
    # 
    if($?1==0) {
        print 'usage: crabPlotHistogramGaussianFit vector lower_limit upper_limit interval fixed_width\n' {} 
        return
    }
    # 
    if(!is_vector(histogram_x) || !is_vector(histogram_y)) {
        if($?4) {
            crabPlotHistogramCalculation $1 $2 $3 $4
        } else {
            if($?3) {
                crabPlotHistogramCalculation $1 $2 $3
            } else {
                if($?2) {
                    crabPlotHistogramCalculation $1 $2
                } else {
                    crabPlotHistogramCalculation $1
                }
            }
        }
    }
    # 
    load crabStat.sm
    if($?5) {
        fit_Histogram_with_GuassianFixedWidth histogram_x histogram_y gaussian_mean gaussian_sigma gaussian_norma
    } else {
        fit_Histogram_with_Guassian histogram_x histogram_y gaussian_mean gaussian_sigma gaussian_norma
    }
    set gaussian_x = _crabpl_min,_crabpl_max,_crabpl_itv
    set gaussian_y = gauss(gaussian_x,$gaussian_mean,$gaussian_sigma) * $gaussian_norma * (SQRT(2*PI)*$gaussian_sigma)
    connect gaussian_x gaussian_y
    rel $(gaussian_x[int(dimen(gaussian_x)*0.56)]) $(gaussian_y[int(dimen(gaussian_x)*0.56)])
    set gaussian_fwhm = 2*sqrt(2*ln(2))*$gaussian_sigma
    putlabel 9 "   Gauss.\,width="$(sprintf('%0.1f',$gaussian_sigma))



crabPlotHistogramCalculation 04
    # 
    # $1 is vector
    # $2 is lower limit
    # $3 is upper limit
    # $4 is interval
    # 
    if($?1==0) {
        print 'usage: crabPlotHistogramCalculation vector lower_limit upper_limit interval\n' {} 
        return
    } else {
        set _crabpl_vec = $1
    }
    if($?2==0) {
        define _crabpl_hist_verbose $verbose verbose 0
        load vecStats.sm vecStats _crabpl_vec 
        set _crabpl_min = _crabpl_vec_MIN_6SIGMA
        set _crabpl_max = _crabpl_vec_MAX_6SIGMA
        set _crabpl_itv = (_crabpl_max-_crabpl_min)/12.0
        set _crabpl_min = _crabpl_min - 1.5*_crabpl_itv
        set _crabpl_max = _crabpl_max + 1.5*_crabpl_itv
        verbose $_crabpl_hist_verbose undef _crabpl_hist_verbose
    }
    if($?2) {set _crabpl_min = $2}
    if($?3) {set _crabpl_max = $3}
    if($?4) {set _crabpl_itv = $4}
    get_hist _crabpl_vec _crabpl_vbase _crabpl_vnumb $(_crabpl_min) $(_crabpl_max) $(_crabpl_itv)
    set histogram_x = _crabpl_vbase
    set histogram_y = _crabpl_vnumb



crabPlotHistogram_xy 03
    # just do the plot
    # histogram x y
    # $1 is output_pdf   -- (1) ends with .pdf, open device and plot; (2) arbitary str, do overplot; (3) ==close, close device. 
    # $2 is x (location array)
    # $3 is y (histogram array)
    if(!$?3) {
        print 'Usage: crabPlotHistogram_xy output.pdf loc hist\n' {}
        return
    } else {
        load crabPlot.sm
        set _crabpl_vbase = $2
        set _crabpl_vnumb = $3
        vecminmax _crabpl_vnumb _crabpl_vnumb_min _crabpl_vnumb_max
        define _crabpl_vnumb_max $($_crabpl_vnumb_max*1.5) #<TODO># Plot limits YRange
    }
    if(index('$1','.pdf')>0) {
        device pdf $1
        define TeX_strings 1
        xtcolours
        if($gx1==3500 && $gx2==31000 && $gy1==3500 && $gy2==31000) {
            location 5500 31500 5000 31500
        }
        if(is_vector(crabPlotHistogram_xlimit)) {
            limits crabPlotHistogram_xlimit 0 $_crabpl_vnumb_max # _crabpl_vnumb
        } else { 
            # echo $fx1 $fx2 $fy1 $fy2
            if($fx1==0 && $fx2==1 && $fy1==0 && $fy2==1) {
                limits _crabpl_vbase 0 $_crabpl_vnumb_max # _crabpl_vnumb
            }
        }
        # usage: set crabPlotHistogram_ticksize = '-1 10 0 0'
        if(is_vector(crabPlotHistogram_ticksize)) {
            ticksize $(crabPlotHistogram_ticksize)
        }
        # plot box
        crabPlotSavePen
        crabPlotDefaultPenForBox
        box
        ltype 1 relocate 0.0 $fy1 draw 0.0 $fy2
        ltype 0 expand 2.0
        if(is_vector(crabPlotHistogram_xlabel)) {xlabel $(crabPlotHistogram_xlabel)} #else {xlabel $2}
        if(is_vector(crabPlotHistogram_ylabel)) {ylabel $(crabPlotHistogram_ylabel)} else {ylabel N}
        crabPlotRestorePen
    }
    # do histogram plot
    histogram _crabpl_vbase _crabpl_vnumb
    crabPlotResetPen
    # 
    if('$1'=='close') {
        define crabPlotHistogram_KeepDevice 0
    }
    if(0==$?crabPlotHistogram_KeepDevice) {
      if(!is_vector(crabPlotHistogram_KeepDevice)) {device nodevice} else {
        if(crabPlotHistogram_KeepDevice<=0) {device nodevice} }
    } else {
      if(0>=$crabPlotHistogram_KeepDevice) {device nodevice} 
    }




