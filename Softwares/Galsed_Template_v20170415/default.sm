rfile 03
        # Automated table readin. Use vector names given in the
        # first line of file  <filename> . Optional 2nd and 3rd
        # arguments select the lines to be read [line1 line2] .
        # Received from: M.Franx (origin RHL?)
        # Noted by: E.Daddi
        # Moded by: DzLIU
        ##if(!$?1){print 'Usage: rfile filename.txt 0 100\n' {}}
        # 2015-06-26 now we allow 0 input argument -- assuming 
        # the user has already called data some file
        # 2016-06-24 now if header name contains STR, we will read as string
        #
        # print message
        if($?verbose) { if($verbose) {
            if($?3) {
                echo Reading rfile $1 lines $2 $3
            } else {
                echo Reading rfile $1
            }
        } }
        define pref_verbose $verbose verbose 0
        define rfhi 0 # column number index
        define rfli 1 # column header line
        if($?1) { data $1 }
        if($?2 && !$?3) { lines $2 0 define rfli 1 }
        if($?2 && $?3) { lines $2 $3 define rfli 1 }
        #if($?2 && $?3) { if($3>$2) {lines $2 $3} }
        declare rfile_headers 0.s # a header list
        #if(is_vector(rfvectors)){unset rfvectors}
        if(is_vector(rfile_vectors)){unset rfile_vectors}
        while {$?rfhc||!$rfhi} {
            define rfhi $($rfhi+1)
            define rfhc read $rfli $rfhi
            if($?rfhc) {
                if(is_vector($rfhc)){set $rfhc""_rfile_backup=$rfhc
                      if($pref_verbose){!echo Read column $rfhi as $rfhc \(backuped existing $rfhc as $rfhc""_rfile_backup\)}
                }else{if($pref_verbose){!echo Read column $rfhi as $rfhc}} set rfile_headers = rfile_headers concat '$rfhc'
                if('$rfhc'=='Type'||'$rfhc'=='Note'){
                  read $rfhc $rfhi.s}else{if(index('$rfhc','Source')>=0||index('$rfhc','Name')>=0||index('$rfhc','Alias')>=0){
                  read $rfhc $rfhi.s}else{if(index('$rfhc','source')>=0||index('$rfhc','name')>=0||index('$rfhc','alias')>=0){
                  read $rfhc $rfhi.s}else{if(index('$rfhc','_STR')>=0){
                  read $rfhc $rfhi.s}else{
                  read $rfhc $rfhi}}}}
                if(is_vector(rfile_vectors)){set rfile_vectors = rfile_vectors concat <$rfhc>
                  }else{set rfile_vectors = <$rfhc>}
                #if(is_vector(rfvectors)) {
                #set rfvectors=rfvectors concat $rfhc
                #} else { set rfvectors=$rfhc }
            }
        } # read the 1st row 1st column
        verbose $pref_verbose
        # print message
        if($?verbose) { if($verbose) {
            echo Closing rfile $1 ###<Modified><DZLIU>###
        } }
        return

rfile_compatible_check
        # 
        ### <Modified><20140325><DZLIU> ### FOR COMPATIBLE
        ### <Modified><20170315><DZLIU> ### FOR COMPATIBLE
        if(1) {                                                                     ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(_id)) {set id = _id}                                       ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(spezX)) {set spez = spezX}                                 ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(zp_X)) {set zp_P = zp_X}                                   ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(zp_X)) {set zp = zp_X}                                     ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(zq)) {set qz = zq}                                         ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(spez) && is_vector(zp_P)) {set zz = spez>0 ? spez : zp_P}  ### COMPATIBLE ### ALWAYS USE Z_{SPEC} IF POSSIBLE ###<Modified><DZLIU>###
            if(is_vector(zz)) {set zp = zz}                                         ### COMPATIBLE ### ALWAYS USE Z_{SPEC} IF POSSIBLE ###<Modified><DZLIU>###
            if(is_vector(_fch1)) {set fch1=_fch1}                                   ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(_fch2)) {set fch2=_fch2}                                   ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(_fch3)) {set fch3=_fch3}                                   ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(_fch4)) {set fch4=_fch4}                                   ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(_dfch1)) {set dfch1=_dfch1}                                ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(_dfch2)) {set dfch2=_dfch2}                                ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(_dfch3)) {set dfch3=_dfch3}                                ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(_dfch4)) {set dfch4=_dfch4}                                ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(radio)) {set fRad=radio}                                   ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(eradio)) {set eRad=eradio}                                 ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(radio)) {set f20cm = radio}                                ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(eradio)) {set df20cm = eradio}                             ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(f3ghz)) {set f10cm = f3ghz}                                ### COMPATIBLE ###<Modified><DZLIU>###
            if(is_vector(df3ghz)) {set df10cm = df3ghz}                             ### COMPATIBLE ###<Modified><DZLIU>###
        }

wfile 03
        # input "output_file.txt" list_of_vectors
        # output to text file
        set __wfile__cols = ($2)
        do __wfile__i = 0, dimen(__wfile__cols)-1 {
            if($__wfile__i==0) {
                set __wfile__strs = <$(__wfile__cols[$__wfile__i])>
            } else {
                set __wfile__strs = __wfile__strs+' '+'$(__wfile__cols[$__wfile__i])'
            }
        }
        if($?verbose) { if($verbose) {
            echo Writing to $1 with vectors: $(__wfile__strs)
        } }
        print $1 <$(__wfile__strs)>








rfile_2014 13   # Automated table readin. Use vector names given in the
                # first line of file <filename>. Optional 2nd and 3rd
                # arguments select the lines to be read [line1 line2].
                # Received from: M.Franx (origin RHL?)
                echo Reading rfile $1 ###<Modified><DZLIU>###
                define pref_verbose $verbose ###<Modified><DZLIU>###
                verbose 0 ###<Modified><DZLIU>###
                data $1
                if ($?2==1 && $?3==1) { lines $2 $3 }
                myget 1
                define ncol 0
                for ncol=1 ncol ncol=ncol+1 nextget
                define row1 read 1 1
                set in=0,(dimen($row1)-1)
                
                ### <Modified><20140325><DZLIU> ### FOR COMPATIBLE
                ### if(index('$1','RadioOwen_priors_updated_')>=0) {
                if(1>0) {                                          ###<Modified><DZLIU>###
                    set id = _id                    ### COMPATIBLE ###<Modified><DZLIU>###
                    set spez = spezX                ### COMPATIBLE ###<Modified><DZLIU>###
                    set zp_P = zp_X                 ### COMPATIBLE ###<Modified><DZLIU>###
                    set zp = zp_X                   ### COMPATIBLE ###<Modified><DZLIU>###
                    set qz = zq                     ### COMPATIBLE ###<Modified><DZLIU>###
                    set zz = spez>0 ? spez : zp_P   ### COMPATIBLE ### ALWAYS USE Z_{SPEC} IF POSSIBLE ###<Modified><DZLIU>###
                    set zp = zz                     ### COMPATIBLE ### ALWAYS USE Z_{SPEC} IF POSSIBLE ###<Modified><DZLIU>###
                    set fch1=_fch1 set dfch1=_dfch1 set fch2=_fch2 set dfch2=_dfch2     ### COMPATIBLE ###<Modified><DZLIU>###
                    set fch3=_fch3 set dfch3=_dfch3 set fch4=_fch4 set dfch4=_dfch4     ### COMPATIBLE ###<Modified><DZLIU>###
                    set fRad=radio set eRad=eradio  ### COMPATIBLE ###<Modified><DZLIU>###
                }
                echo Closing rfile $1 ###<Modified><DZLIU>###
                verbose $pref_verbose ###<Modified><DZLIU>###
                verbose 0

myget   1       # (Try to) read the first column from a data file. The
                # name of the vector to read that column in, will be the
                # 1st word of line 1 (after the '#' sign).
                # Origin: RHL &&/|| M.Franx
                DEFINE namecol READ 1 $1
                ###<Modified><DZLIU>### define verbose ($verbose -1)
                READ $namecol $1
                SET HELP $namecol Col 1 of $data_file
                ###<Modified><DZLIU>### define verbose ($verbose +1)

nextget         # (Try to) read the next column from a data file. The
                # name of the vector to read that column in, will be the
                # ($ncol+1)th word of line 1 (after the '#' sign).
                # Origin: RHL &&/|| M.Franx
                DEFINE ncol ($ncol + 1)
                DEFINE namecol READ 1 $ncol
                if ($?namecol==0) {set ncol=-1 define ncol -1 RETURN}
                ###<Modified><DZLIU>### define verbose ($verbose -1)
                READ $namecol $ncol
                SET HELP $namecol Col $ncol of $data_file
                ###<Modified><DZLIU>### define verbose ($verbose +1)

logerr  23      # function to return the error on decimal logarithm lg($1),
                # with $2 the error on $1 and $3 the sign to apply in the small
                # error approximation: -1 indicates the lower (fainter) and +1
                # the upper (brighter) error. If the small error approximation
                # does not hold or if the sign is not provided, the formal
                # error, d/dx(lg(x)) = (1/ln(10))*(dx/x), is returned. If $1
                # is negative, 0 is returned. RAJ.
                DEFINE _s LOCAL
                if ($?3!=0) { define _s $3 } else { define _s 0 }
                set $0 = ($1<0) ? 0 : ( ($_s!=0)?((abs($2)<abs(0.1*$1))? \
                   lg(($1+$_s*$2)/$1):(1/ln(10))*($2/$1)):(1/ln(10))*($2/$1) )



gop    02    limits $1 $2 erase box points $1 $2
goc    02    limits $1 $2 erase box connect $1 $2
goi    02    limits $1 $2 erase box histogram $1 $2
