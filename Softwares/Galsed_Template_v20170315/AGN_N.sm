AGN_Parallel 02
		# replace AGNall
		# usage: macro read AGN_N.sm AGN_Parallel Updated_Catalog_20150430.txt 9412
		if(!$?1) { return }
		if(!$?2) { return }
		macro read default.sm
		macro read fit_engine.sm
		
		# 
		# Read Catalog
		# 
		define in_Catalog $1
		#rfile $in_Catalog
		#rfile_compatible_check
		data $in_Catalog read in_Sources 1.f
		
		# 
		# Check dirs (e.g. SED libraries)
		# 
		check_dir_exist
		echo Check dirs ok!
		
		# 
		# Check SED fitting tunable parameters: Type_SED, Type_20cm (Type_AGN), and Type_FIR
		# 
		define TeX_strings 1
		define savepdf 1 #<TODO># comment this and set "device x11" to show on screen
		
		if(is_file("coo_SED.txt")) {
			data coo_SED.txt read coo_SED 1
		} else {
			print 'Warning! coo_SED.txt was not found! Set all coo_SED=0!\n' {}
				set coo_SED = int(in_Sources*0)
		}
		
		if(is_file("coo_AGN.txt")) {
			data coo_AGN.txt read coo_AGN 1
		} else {
			print 'Warning! coo_AGN.txt was not found! Set all coo_AGN=0!\n' {}
				set coo_AGN = int(in_Sources*0)
		}
		
		if(is_file("coo_FIR.txt")) {
			data coo_FIR.txt read coo_FIR 1
		} else {
			print 'Warning! coo_FIR.txt was not found! Set all coo_FIR=0!\n' {}
				set coo_FIR = int(in_Sources*0)
		}
		
		define diff_AGN 1
		define diff_SB 1
		define diff_FIR 1
		
		# 
		# Define output bands
		# 
		set out_Waves = {70 100 160 250 350 500 850 1160 1200 1250 2000 2050 1e5 2e5}
		set out_Bands = {70 100 160 250 350 500 850 1160 1200 1250 2000 2050 10cm 20cm}
		set out_Fluxes = out_Waves * 0.0
		set out_Errors = out_Waves * 0.0
		
		# 
		# Initialize output arrays
		# 
		foreach Vdar {meAGN fAGN eAGN meSFR fSFR eSFR fTOT eTOT f_zz e_zz} {declare x$Vdar 0}
		foreach Vdar out_Bands {declare xf$Vdar 0}
		foreach Vdar out_Bands {declare xe$Vdar 0}
		
		# 
		# Loop sources in the input catalog
		# 
		foreach Vdar in_Sources {
			if($2==$Vdar) {
			echo $Vdar
			xfitAGN $Vdar
			rMatrix $Vdar
			set SAVEDid = $Vdar
			foreach VdarX {meAGN fAGN eAGN meSFR fSFR eSFR fTOT eTOT f_zz e_zz} {set x$VdarX = $$VdarX}
			foreach VdarX out_Bands {set xf$VdarX = $f$VdarX}
			foreach VdarX out_Bands {set xe$VdarX = $e$VdarX}
			define print_noheader 0
			set SAVEDcols = {SAVEDid xf70 xe70 xf100 xe100 xf160 xe160 xf250 xe250 xf350 xe350 xf500 xe500 \
			                	     xf850 xe850 xf1160 xe1160 xf1200 xe1200 xf1250 xe1250 xf2000 xe2000 xf2050 xe2050 xfRad xeRad}
			print "fit_parallel_HDFN/ResLMT_"$Vdar.txt '%.0f\n' {SAVEDid xmeAGN xfAGN xeAGN xmeSFR xfSFR xeSFR xfTOT xeTOT xf_zz xe_zz}
			print "fit_parallel_HDFN/ResLMTfluxes_"$Vdar.txt '%.0f\n' <$(SAVEDcols)>
			}
		}


check_dir_exist 00
		!test -d fit_chi_HDFN
		if(256==$exit_status) {!mkdir fit_chi_HDFN}
		!test -d fit_matrix_HDFN
		if(256==$exit_status) {!mkdir fit_matrix_HDFN}
		!test -d fit_plots_HDFN
		if(256==$exit_status) {!mkdir fit_plots_HDFN}
		!test -d fit_parallel_HDFN
		if(256==$exit_status) {!mkdir fit_parallel_HDFN}


xfitAGN	01
		define rel_precision_zphot .06
		define Nsigma_zphotrange 1.5
		define Usigma 0.2 # dex
		define Lambda_minrest 6.0 # um
		define Lambda_maxrest_stars 3 # um
		define Apply_highz_stellar_range 0 # whether we apply highz stellar range (z>4 )
		define l1AGN $Lambda_minrest
		define l2AGN 35
		#define dirfile "fit_matrix_HDFN" #<20170315># obsolete
		#verbose 0
		
		### macro read default.sm rfile $in_Catalog
		
		### macro read Chiara_N.sm sSFR   ### COMPATIBLE
		
		###<20140326><DZLIU>### rfile Res_$in_Catalog
		###<20140326><DZLIU>### rfile Handy_SPIRE.txt
		###<20140326><DZLIU>### rfile use_newfluxes_radio_24.txt
		
		if($?1) {
			set IiI=1,dimen(in_Sources)
			set EeE=IiI if($1==in_Sources)
			if(dimen(EeE)==0) {
				echo "NO OBJECT CHOSEN!"
				return
			}
			echo 
			echo OBJECT CHOSEN ID=$1 NO=$(EeE[0])
			# 
			verbose 0
			if(1) {
				# read one line data from the input catalog, assuming the header has TWO commented lines
				rfile $in_Catalog $(EeE[0]+2) $(EeE[0]+2)
				rfile_compatible_check
			}
			if($1!=id) {
				# read one line data from the input catalog, assuming the header has ONE commented lines
				rfile $in_Catalog $(EeE[0]+1) $(EeE[0]+1)
				rfile_compatible_check
			}
			if($1!=id) {
				echo "Error! Could not read the input catalog! Perharps the header lines are not starting with \# or are more than two lines?"
				return
			}
			# 
			define nobject $1
		} else {
		    define nobject -1
		    return
		}
		
		# 
		# PACS HPF correction
		# 
		if(is_vector(f100) && is_vector(df100)) {
			foreach var {f100 df100} {set $var=f24>60 && f24/df24>3 ? $var*1.12 : $var*1.19} }
		if(is_vector(f160) && is_vector(df160)) {
			foreach var {f160 df160} {set $var=f24>60 && f24/df24>3 ? $var*1.12 : $var*1.19} }
		###<Added><20140416><DZLIU>### 
		print +done_pacs_flux_and_error_compensation 'Done PACS 100 and 160 flux and error compensations ' {}
		print +done_pacs_flux_and_error_compensation 'with factor 1.12 for bright sources and 1.19 for faint sources, ' {}
		print +done_pacs_flux_and_error_compensation 'to correct the missing flux due to high-pass filtering.\n' {}
		
		# 
		# IRAC, radio 20cm and 10cm flux unit conversion from uJy to mJy
		# 
		set xUJ = {fch1 dfch1 fch2 dfch2 fch3 dfch3 fch4 dfch4 }
		if(is_vector(f16) && is_vector(df16)) { set xUJ = xUJ concat 'f16' concat 'df16' }
		if(is_vector(f24) && is_vector(df24)) { set xUJ = xUJ concat 'f24' concat 'df24' }
		if(is_vector(radio) && is_vector(eradio)) { set xUJ = xUJ concat 'radio' concat 'eradio' }
		if(is_vector(f20cm) && is_vector(df20cm)) { set xUJ = xUJ concat 'f20cm' concat 'df20cm' }
		if(is_vector(f10cm) && is_vector(df10cm)) { set xUJ = xUJ concat 'f10cm' concat 'df10cm' }
		foreach UJ xUJ { set $UJ = ($UJ!=-99)?($UJ/1000):-99 } ### convert unit uJy to mJy ### NO NEED FOR PACS&SPIRES
		
		# 
		# K band magnitude to flux mJy
		# 
		set fk = (KtotX!=-99) ? 10**(-0.4*(KtotX-23.9)-3.0) : -99   ###<20140326><DZLIU>### now fK is mJy
		set dfk = (KtotX!=-99) ? fk/10.0 : 1e5
		
		
		###<TEST><20140326><DZLIU>### #set xF = {fk fch1 fch2 fch3 fch4 f16 f24 f100 f160 f250 radio}
		###<TEST><20140326><DZLIU>### #set xdF = {dfk dfch1 dfch2 dfch3 dfch4 df16 df24 df100 df160 df250 eradio}
		###<TEST><20140326><DZLIU>### set xF = {fk fch1 fch2 fch3 fch4 f16 f24 f100 f160 f250 f350 f500 radio}
		###<TEST><20140326><DZLIU>### set xdF = {dfk dfch1 dfch2 dfch3 dfch4 df16 df24 df100 df160 df250 df350 df500 eradio}
		###<TEST><20140326><DZLIU>### #set xF = {fk fch1 fch2 fch3 fch4 f16 f24 f100 f160 f250 f350 f500 f1200 f2200 f3300 eradio}
		###<TEST><20140326><DZLIU>### #set xdF = {dfk dfch1 dfch2 dfch3 dfch4 df16 df24 df100 df160 df250 df350 df500 df1200 df2200 df3300 eradio}
		###<TEST><20140326><DZLIU>### set xF = {fk fch1 fch2 fch3 fch4 f16 f24 f100 f160 f250 f350 f500 f1200 radio}
		###<TEST><20140326><DZLIU>### set xdF = {dfk dfch1 dfch2 dfch3 dfch4 df16 df24 df100 df160 df250 df350 df500 df1200 eradio}
		###<TEST><20140326><DZLIU>### #foreach gggD xdF {set $gggD = $gggD*0+1e11} set df1200=df1200*0+.01
		# 
		# Input: xF xdF wW #<Added><20170315># 
		# 
		declare xBands 0.s
		declare wW 0
		declare xF 0.s
		declare xdF 0.s
		data "default_filters.txt" read {in_Waves 1.f in_Bands 2.s} #<Added><20170315># 
		do in_Index = 0, dimen(in_Bands)-1 {
			define xBand $(in_Bands[$in_Index])
			if(is_vector(f$xBand) && is_vector(df$xBand)) { 
				set xBands = xBands concat '$(in_Bands[$in_Index])'
				set wW = wW concat  $(in_Waves[$in_Index])
				set xF = xF concat 'f$xBand'
				set xdF = xdF concat 'df$xBand'
				set df$xBand = df$xBand>0.0 ? df$xBand : 1e5 					# For single band non-detect sources, set very large error. 
				set df$xBand = f$xBand/df$xBand<10.0 ? df$xBand : f$xBand/10.0  # Error should not be too small.
			}
		}
		
		# set df24 = 1e10 #<TODO># for Id9319
		# set df24 = 1e10 #<TODO># for Id15678
		set f24off = (f24==-0.000553)       ###<Corrected><20140415><DZLIU>###     <TODO>
		set f24 = (f24off==1)? -99 : f24    ###<Corrected><20140415><DZLIU>### 
		set df24 = (f24off==1)? 1e10 : df24 ###<Corrected><20140415><DZLIU>### 
		
		# Type_20cm
		# set eradio = eradio*0.0+1e10
		if($diff_AGN==1){
			set eee_AGN = coo_AGN if($1==in_Sources)
			define eee_AGN $(eee_AGN[0])
			if($eee_AGN==1) {set eradio = eradio+1e10}
		} else { define eee_AGN 0 }
		
		# Type_FIR
		# FitOnlyFIR <updated><20151215><dzliu><daddi>
		if($diff_FIR==1) { 
			set eee_FIR = coo_FIR if($1==in_Sources)
			define eee_FIR $(eee_FIR[0])
			if($eee_FIR==1) {
				#<20160214># foreach var {k ch1 ch2 ch3 ch4 16 24} {set df$var = df$var + 1e10}
				#<20160214># set eradio = eradio + 1e10
			}
		} else { define eee_FIR 0 }
		
		# 
		# Call goxfitAGN
		# 
		macro read fit_engine.sm goxfitAGN $1
		







