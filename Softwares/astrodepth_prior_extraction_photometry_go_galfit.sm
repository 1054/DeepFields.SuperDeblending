read_data
    load astroGalfit.sm
    data "prior_x_y.txt" read {_px 1 _py 2}
    set _id = 0,dimen(_px)-1
    set _se = (_px>0 && _py>0)
    if(sum(_se) > 0) {
        set id = _id if(_se)
        set px = _px if(_se)
        set py = _py if(_se)
        if(is_file("No_catalog_source_within_image")) {!rm "No_catalog_source_within_image"}
    } else {
        print "No_catalog_source_within_image" 'No catalog source within image.\n' {}
        exit
    }


read_pixscale
    if(is_file("image_sci_pixscale.txt")) {
        if(is_vector(pixscale)) {unset pixscale}
        data "image_sci_pixscale.txt" read {pixscale 1}
        if(!is_vector(pixscale)) {!rm "image_sci_pixscale.txt"} # added a check here
    }
    if(!is_file("image_sci_pixscale.txt")) {
        !pixscale "image_sci.fits" > "image_sci_pixscale.txt"
    }
    if(!is_file("image_sci_pixscale.txt")) {
        echo "Error! Failed to get pixscale from the image_sci.fits! Failed to read image_sci_pixscale.txt! Exit!"
        exit
    }
    data "image_sci_pixscale.txt" read {pixscale 1}


read_pixnoise
    if(is_file("image_sci_pixnoise.txt")) {
        if(is_vector(pixnoise)) {unset pixnoise}
        data "image_sci_pixnoise.txt" read {pixnoise 1}
        if(!is_vector(pixnoise)) {!rm "image_sci_pixnoise.txt"} # added a check here
    }
    if(!is_file("image_sci_pixnoise.txt")) {
        !CrabPhotImageStatistics "image_sci.fits" > "image_sci_pixstats.txt"
        data "image_sci_pixstats.txt" read {pixstats 7}
        define print_noheader 1
        print "image_sci_pixnoise.txt" '%g\n' {pixstats}
        define print_noheader 0
    }
    if(!is_file("image_sci_pixnoise.txt")) {
        echo "Error! Failed to get pixnoise from the image_sci.fits! Failed to read image_sci_pixnoise.txt! Exit!"
        exit
    }
    data "image_sci_pixnoise.txt" read {pixnoise 1}


calc_beamarea
    if(is_file("image_sci_beamarea.txt")) {
        !mv "image_sci_beamarea.txt" "image_sci_beamarea.txt.backup"
    }
    if(is_vector(beamarea)) {
        unset beamarea
    }
    if(is_file("image_sci.fits")) {
        !gethead "image_sci.fits" "BMAJ" "BMIN" "BPA" > "image_sci_beamarea.tmp"
        verbose 0
        if(is_vector(tmp_bmaj)) {unset tmp_bmaj}
        if(is_vector(tmp_bmin)) {unset tmp_bmin}
        if(is_vector(tmp_bpa)) {unset tmp_bpa}
        data "image_sci_beamarea.tmp" read {tmp_bmaj 1 tmp_bmin 2 tmp_bpa 3}
        if(is_vector(tmp_bmaj) && is_vector(tmp_bmin) && is_vector(tmp_bpa)) {
            set beamarea = pi/(4.0*ln(2)) * (tmp_bmaj*3600.0 * tmp_bmin*3600.0) # arcsec-square
            set beamarea_sinc = pi * (tmp_bmaj/1.89549*3600.0 * tmp_bmin/1.89549*3600.0) # arcsec-square
            define print_noheader 1
            print "image_sci_beamarea.txt" '%g\n' {beamarea}
            print "image_sci_beamarea_sinc.txt" '%g\n' {beamarea_sinc}
            define print_noheader 0
        }
        verbose 1
    }


calc_peak2total
    if(is_file("image_psf_peak2total.txt")) {
        !mv "image_psf_peak2total.txt" "image_psf_peak2total.txt.backup"
    }
    if(is_vector(peak2total)) {
        unset peak2total
    }
    if(is_file("image_psf.fits")) {
        !CrabPhotImageStatistics -header-in-comment image_psf.fits > "image_psf_peak2total.tmp"
        verbose 0
        if(is_vector(tmp_pix_max)) {unset tmp_pix_max}
        if(is_vector(tmp_pix_sum)) {unset tmp_pix_sum}
        data "image_psf_peak2total.tmp" read {tmp_pix_max 5 tmp_pix_sum 6}
        if(is_vector(tmp_pix_max) && is_vector(tmp_pix_sum)) {
            set peak2total = tmp_pix_max / tmp_pix_sum
            define print_noheader 1
            print "image_psf_peak2total.txt" '%g\n' {peak2total}
            define print_noheader 0
        }
        verbose 1
    }





mask_prior_sources
    if(is_file("No_catalog_source_with_enough_getpix_SNR")) {
        !rm "No_catalog_source_with_enough_getpix_SNR"
    }
    if(is_file("getpix.result") && is_vector(px) && is_vector(py)) {
        data "getpix.result" read {f_peak 1.f f_int 2.f snr_peak 3.f snr_int 4.f id 5.f}
        set mask = (snr_int>=1.0 && snr_peak>=2.0) #<before><20170403><dzliu>#
        set threshold_int = 2.0
        set threshold_peak = 3.6
        set mask = ((snr_int/threshold_int>=0.35 && snr_peak/threshold_peak>=0.35) || (snr_int/threshold_int>=0.75) || (snr_peak/threshold_peak>=0.75))
        if(sum(mask)>0) {
            set px = px if(mask)
            set py = py if(mask)
            set id = id if(mask)
        } else {
            declare px 0.f
            declare py 0.f
            declare id 0.f
            print "No_catalog_source_with_enough_getpix_SNR" 'No catalog source with enough getpix SNR.\n' {}
            return # exit
        }
    } else {
        print 'Warning! \"getpix.result\" was not found! We will not mask the prior sources!\n' {}
    }






go_galfit_n1
    # negative image
    # no mask_prior_sources
    read_data
    read_pixscale
    if(dimen(px)>0 && dimen(py)==dimen(px)) {
        initGalfitParam px py
        set Note = id
        set Mags = float(id) * 0.0 + 8.0 #<20170228># initial magnitude ~8.0
        set ParamMaxMags = ParamMaxMags*0.0 + 30.0
        set ParamCoB = 5.0/abs(pixscale) #<20170303><dzliu><plang># set convolution box of about 5 arcsec
        writeGalfitParam fit_n1.param
        writeGalfitLimit fit_n1.limit
        writeGalfitInput fit_n1.input image_negative.fits fit_n1.fits image_rms.fits image_psf.fits fit_n1.limit
        !galfit fit_n1.input > fit_n1.out
        if(is_file("fit.log")) {!mv "fit.log" "fit_n1.log"}
        if(is_file("fit_n1.fits")) {
            readGalfitResult "fit_n1.fits"
            print_result "fit_n1"
        }
    }
    

go_galfit_0
    read_data
    read_pixscale
    mask_prior_sources
    if(dimen(px)>0 && dimen(py)==dimen(px)) {
        initGalfitParam px py
        set Note = id
        set Mags = float(id) * 0.0 + 8.0 #<20170228># initial magnitude ~8.0
        set ParamMaxMags = float(id)*0.0 + 30.0
        set ParamCoB = 5.0/abs(pixscale) #<20170303><dzliu><plang># set convolution box of about 5 arcsec
        if(is_file("galfit.01")) {!rm galfit.*}
        writeGalfitParam fit_0.param
        writeGalfitLimit fit_0.limit
        writeGalfitInput fit_0.input image_sci.fits fit_0.fits image_rms.fits image_psf.fits fit_0.limit
        !galfit fit_0.input > fit_0.out
        if(is_file("fit.log")) {!mv "fit.log" "fit_0.log"}
        if(is_file("fit_0.fits")) {
            readGalfitResult "fit_0.fits"
            print_result "fit_0"
        }
    }
    

go_galfit_1
    read_data
    read_pixscale
    mask_prior_sources
    if(dimen(px)>0 && dimen(py)==dimen(px)) {
        if(is_file("fit_0.result")) {
            data "fit_0.result" read {ResultPosX 1.f ResultPosY 2.f ResultMags 5.f ResultMagsErr 6.f}
        } else {
            readGalfitResult "fit_0.fits"
            print_result "fit_0"
        }
        set Vary_X = (ResultMagsErr<0.5) ? 0.5/abs(pixscale) : 0 # maximum 0.5 arcsec
        set Vary_Y = (ResultMagsErr<0.5) ? 0.5/abs(pixscale) : 0 # maximum 0.5 arcsec
        initGalfitParam px py Vary_X Vary_Y
        set Note = id
        set Mags = ResultMags # (ResultMagsErr<0.5) ? ResultMags : Mags
        set ParamMaxMags = float(id)*0.0 + 30.0
        set ParamCoB = 5.0/abs(pixscale) #<20170303><dzliu><plang># set convolution box of about 5 arcsec
        writeGalfitParam fit_1.param
        writeGalfitLimit fit_1.limit
        writeGalfitInput fit_1.input image_sci.fits fit_1.fits image_rms.fits image_psf.fits fit_1.limit
        !galfit fit_1.input > fit_1.out
        if(is_file("fit.log")) {!mv "fit.log" "fit_1.log"}
        if(is_file("fit_1.fits")) {
            readGalfitResult "fit_1.fits"
            print_result "fit_1"
        }
    }
    

go_galfit_2
    read_data
    read_pixscale
    mask_prior_sources
    if(dimen(px)>0 && dimen(py)==dimen(px)) {
        if(is_file("fit_1.result")) {
            data "fit_1.result" read {ResultPosX 1.f ResultPosY 2.f ResultMags 5.f ResultMagsErr 6.f}
        } else {
            readGalfitResult "fit_1.fits"
            print_result "fit_1"
        }
        set Pos_X = (ResultMagsErr<0.25) ? ResultPosX : px
        set Pos_Y = (ResultMagsErr<0.25) ? ResultPosY : py
        set Vary_X = (ResultMagsErr<0.25) ? 0.5/abs(pixscale) : 0 # maximum 0.5 arcsec
        set Vary_Y = (ResultMagsErr<0.25) ? 0.5/abs(pixscale) : 0 # maximum 0.5 arcsec
        initGalfitParam Pos_X Pos_Y Vary_X Vary_Y
        set Note = id
        set Mags = ResultMags # (ResultMagsErr<0.25) ? ResultMags : Mags
        set Type = (ResultMagsErr<0.25) ? 'gaussian' : Type
        set Rads = (ResultMagsErr<0.25) ?  0.5/abs(pixscale) : Rads
        set ParamMaxMags = float(id)*0.0 + 30.0
        set ParamFitRads = (ResultMagsErr<0.25) ? 1                 : ParamFitRads
        set ParamMinRads = (ResultMagsErr<0.25) ? 0.50              : ParamMinRads
        set ParamMaxRads = (ResultMagsErr<0.25) ? 3.0/abs(pixscale) : ParamMaxRads # maximum 3.0 arcsec FWHM
        set ParamFitElli = (ResultMagsErr<0.25) ? 1                 : ParamFitElli
        set ParamMinElli = (ResultMagsErr<0.25) ? 0.20              : ParamMinElli
        set ParamMaxElli = (ResultMagsErr<0.25) ? 10.0              : ParamMaxElli
        set ParamFitRoti = (ResultMagsErr<0.25) ? 1                 : ParamFitRoti
        set ParamMinRoti = (ResultMagsErr<0.25) ? 0                 : ParamMinRoti
        set ParamMaxRoti = (ResultMagsErr<0.25) ? 360.0             : ParamMaxRoti
        set ParamCoB = 5.0/abs(pixscale) #<20170303><dzliu><plang># set convolution box of about 5 arcsec
        writeGalfitParam fit_2.param
        writeGalfitLimit fit_2.limit
        writeGalfitInput fit_2.input image_sci.fits fit_2.fits image_rms.fits image_psf.fits fit_2.limit
        !galfit fit_2.input > fit_2.out
        if(is_file("fit.log")) {!mv "fit.log" "fit_2.log"}
        if(is_file("fit_2.fits")) {
            readGalfitResult "fit_2.fits"
            print_result "fit_2"
        }
    }






print_result 01
    #<before><20170304># if(!is_file("No_catalog_source_within_image")) {
    #<before><20170304>#     if(is_file($1.result)) {!mv $1.result $1.result.backup}
    #<before><20170304>#     if(is_file("image_psf_peak2total.txt") && is_vector(ResultMags) && is_vector(ResultMagsErr) && is_vector(ResultPosX) && is_vector(ResultPosY) && $?1) {
    #<before><20170304>#         data "image_psf_peak2total.txt" read {peak2total 1.f}
    #<before><20170304>#         set ResultFlux = (10**(ResultMags/(-2.5))) * peak2total
    #<before><20170304>#         set ResultFluxErr = ResultMagsErr*ResultFlux/1.08
    #<before><20170304>#         set ResultFlux = (ResultMags<30) ? ResultFlux : 1e-30 #<20170303><dzliu># 
    #<before><20170304>#         if(is_file($1.param)) {
    #<before><20170304>#             data $1.param read {id 31.f}
    #<before><20170304>#         }
    #<before><20170304>#         print $1.result '%12.3f %12.3f %15g %15g %15.3f %15.3f %15.0f\n' {ResultPosX ResultPosY ResultFlux ResultFluxErr ResultMags ResultMagsErr id}
    #<before><20170304>#     }
    #<before><20170304># }
    if(!is_file("No_catalog_source_within_image")) {
        read_pixscale
        read_pixnoise
        calc_beamarea
        calc_peak2total
        # 
        if(is_file($1.result)) {
            !mv $1.result $1.result.backup
        }
        # 
        if(is_vector(ResultMags) && is_vector(ResultMagsErr) && is_vector(ResultPosX) && is_vector(ResultPosY) && $?1) {
            set ResultFlux = ResultMags*0.0 + 1e-30
            set ResultFluxErr = ResultMags*0.0 + 1e+30
            do i=0,dimen(ResultMags)-1 {
                if(ResultType[$i]=='psf') {
                    # In this case (10**(ResultMags/(-2.5))) equals the (pix_max / peak2total)
                    set ResultFlux[$i] = (10**(ResultMags[$i]/(-2.5))) / beamarea * (pixscale*pixscale) # * peak2total
                    set ResultFluxErr[$i] = ResultMagsErr[$i]*ResultFlux[$i]/1.08
                }
                if(ResultType[$i]=='gaussian') {
                    # In this case (10**(ResultMags/(-2.5))) equals the (pix_sum)
                    set ResultFlux[$i] = (10**(ResultMags[$i]/(-2.5))) / beamarea * (pixscale*pixscale) # * (pi/(4*ln(2))*ResultRads[$i]*ResultRads[$i]*ResultElli[$i]) #<20170303><dzliu># must correct Jy/beam -> Jy/pixel for Gaussian fitting
                    set ResultFluxErr[$i] = ResultMagsErr[$i]*ResultFlux[$i]/1.08
                }
                if(ResultMags[$i]>=30) {
                    set ResultFlux[$i] = 1e-30 #<20170303><dzliu># 
                }
            }
            if(is_file($1.param)) {
                data $1.param read {cat_index 31.f}
            }
            if(is_file("prior_id.txt")) {
                data "prior_id.txt" read {cat_id_full 1.s}
                set cat_id = cat_id_full[cat_index]
            }
            set x = ResultPosX
            set y = ResultPosY
            set f = ResultFlux
            set f_err = ResultFluxErr
            set mag = ResultMags
            set mag_err = ResultMagsErr
            set maj = ResultRads * pixscale
            set maj_err = ResultRadsErr * pixscale
            set min = maj*ResultElli
            set min_err = maj*ResultElliErr
            set pa = ResultRoti
            set pa_err = ResultRotiErr
            print $1.result '%12.4f %12.4f %14g %14g %10.4f %12g %10.4f %12g %10.4f %12g %10.4f %12g %12.0f %12s\n' \
                {x y f f_err mag mag_err maj maj_err min min_err pa pa_err cat_index cat_id}
        }
    }


print_result_final 00
    if(!is_file("No_catalog_source_within_image")) {
        if(is_file("final.result")) {!mv final.result final.result.backup}
        data "image_sci_pixnoise.txt" read {rms 1.f}
        data "prior_id.txt" read {cat_id_full 1.s}
        # 
        if(!is_file("No_catalog_source_with_enough_getpix_SNR")) {
            data "getpix.result" read {f_peak 1 f_int 2 snr_peak 3 snr_int 4 cid_getpix 5.f}
            data "getpix.input" read {x_getpix 1.f y_getpix 2.f}
            data "fit_0.result" read {x_fit_0 1.f y_fit_0 2.f f_fit_0 3.f df_fit_0 4.f cid_fit_0 13.f}
            data "fit_1.result" read {x_fit_1 1.f y_fit_1 2.f f_fit_1 3.f df_fit_1 4.f cid_fit_1 13.f}
            data "fit_2.result" read {x_fit_2 1.f y_fit_2 2.f f_fit_2 3.f df_fit_2 4.f cid_fit_2 13.f}
            define print_noheader 1
            print "getpix.sky2xy.input" '%15.4f %15.4f\n' {x_getpix y_getpix}
            print "fit_0.sky2xy.input" '%15.4f %15.4f\n' {x_fit_0 y_fit_0}
            print "fit_1.sky2xy.input" '%15.4f %15.4f\n' {x_fit_1 y_fit_1}
            print "fit_2.sky2xy.input" '%15.4f %15.4f\n' {x_fit_2 y_fit_2}
            define print_noheader 0
            !xy2sky -d -n 10 "image_sci.fits" @"getpix.sky2xy.input" > "getpix.sky2xy.output"
            !xy2sky -d -n 10 "image_sci.fits" @"fit_0.sky2xy.input" > "fit_0.sky2xy.output"
            !xy2sky -d -n 10 "image_sci.fits" @"fit_1.sky2xy.input" > "fit_1.sky2xy.output"
            !xy2sky -d -n 10 "image_sci.fits" @"fit_2.sky2xy.input" > "fit_2.sky2xy.output"
            data "getpix.sky2xy.output" read {ra_getpix 1.f dec_getpix 2.f}
            data "fit_0.sky2xy.output" read {ra_fit_0 1.f dec_fit_0 2.f}
            data "fit_1.sky2xy.output" read {ra_fit_1 1.f dec_fit_1 2.f}
            data "fit_2.sky2xy.output" read {ra_fit_2 1.f dec_fit_2 2.f}
            foreach var {f_peak f_int rms f_fit_0 f_fit_1 f_fit_2 df_fit_0 df_fit_1 df_fit_2} {set $var = $var * 1e3} # mJy
            set id_getpix = cat_id_full[cid_getpix]
            set id_fit_0 = cat_id_full[cid_fit_0]
            set id_fit_1 = cat_id_full[cid_fit_1]
            set id_fit_2 = cat_id_full[cid_fit_2]
            set snr_fit_0 = (df_fit_0>rms) ? (f_fit_0/df_fit_0) : (f_fit_0/rms)
            set snr_fit_1 = (df_fit_1>rms) ? (f_fit_1/df_fit_1) : (f_fit_1/rms)
            set snr_fit_2 = (df_fit_2>rms) ? (f_fit_2/df_fit_2) : (f_fit_2/rms)
            set det_getpix = int(snr_peak>=3.6 || snr_int>=2.0)
            set det_fit_0 = int(snr_fit_0>=3.0)
            set det_fit_1 = int(snr_fit_1>=3.0)
            set det_fit_2 = int(snr_fit_2>=3.0)
            set Nfit_getpix = int(dimen(cid_getpix)) set Ndet_getpix = int(sum(det_getpix))
            set Nfit_fit_0 = int(dimen(cid_fit_0)) set Ndet_fit_0 = int(sum(det_fit_0))
            set Nfit_fit_1 = int(dimen(cid_fit_1)) set Ndet_fit_1 = int(sum(det_fit_1))
            set Nfit_fit_2 = int(dimen(cid_fit_2)) set Ndet_fit_2 = int(sum(det_fit_2))
            print "getpix.result.ra.dec.detect.id" '%15.7f %15.7f %15d %15s\n' {ra_getpix dec_getpix det_getpix id_getpix}
            print "fit_0.result.ra.dec.detect.id" '%15.7f %15.7f %15d %15s\n' {ra_fit_0 dec_fit_0 det_fit_0 id_fit_0}
            print "fit_1.result.ra.dec.detect.id" '%15.7f %15.7f %15d %15s\n' {ra_fit_1 dec_fit_1 det_fit_1 id_fit_1}
            print "fit_2.result.ra.dec.detect.id" '%15.7f %15.7f %15d %15s\n' {ra_fit_2 dec_fit_2 det_fit_2 id_fit_2}
            print "fit_0.result.ra.dec.f.df.snr.id" '%15.7f %15.7f %15g %15g %15g %15s\n' {ra_fit_0 dec_fit_0 f_fit_0 df_fit_0 snr_fit_0 id_fit_0}
            print "fit_1.result.ra.dec.f.df.snr.id" '%15.7f %15.7f %15g %15g %15g %15s\n' {ra_fit_1 dec_fit_1 f_fit_1 df_fit_1 snr_fit_1 id_fit_1}
            print "fit_2.result.ra.dec.f.df.snr.id" '%15.7f %15.7f %15g %15g %15g %15s\n' {ra_fit_2 dec_fit_2 f_fit_2 df_fit_2 snr_fit_2 id_fit_2}
        } else {
            data "getpix.result" read {f_peak 1 f_int 2 snr_peak 3 snr_int 4 cid_getpix 5.f}
            data "getpix.input" read {x_getpix 1.f y_getpix 2.f}
            define print_noheader 1
            print "getpix.sky2xy.input" '%15.4f %15.4f\n' {x_getpix y_getpix}
            define print_noheader 0
            !sky2xy -d -n 10 "image_sci.fits" @"getpix.sky2xy.input" > "getpix.sky2xy.output"
            set id_getpix = cat_id_full[cid_getpix]
            set id_fit_0 = 0
            set id_fit_1 = 0
            set id_fit_2 = 0
            set snr_fit_0 = 0
            set snr_fit_1 = 0
            set snr_fit_2 = 0
            set det_getpix = (snr_peak>=3.6 || snr_int>=2.0)
            set Nfit_fit_0 = 0 set Ndet_fit_0 = 0
            set Nfit_fit_1 = 0 set Ndet_fit_1 = 0
            set Nfit_fit_2 = 0 set Ndet_fit_2 = 0
            set Nfit_getpix = dimen(cid_getpix) set Ndet_getpix = sum(det_getpix)
            print "getpix.result.ra.dec.detect.id" '%15.7f %15.7f %15d %15s\n' {ra_getpix dec_getpix det_getpix id_getpix}
        }
        # 
        print "final.result" '%15d %15d %15d %15d %15d %15d %15d %15d\n' \
            {Nfit_getpix Ndet_getpix Nfit_fit_0 Ndet_fit_0 Nfit_fit_1 Ndet_fit_1 Nfit_fit_2 Ndet_fit_2}
        # 
    } else {
        if(is_file("final.result")) {!mv final.result final.result.backup}
    }











