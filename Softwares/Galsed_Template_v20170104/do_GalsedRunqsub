#!/bin/bash
# 
# See the Usage in README
# 
# 
# 
CURRENTBAND=""
CATALOGFILE="RadioOwenMIPS24_priors_dzliu_Band850_20160909.txt"
CATALOGIDCN=1 # the number of id column, starting from 1
EXCLUDEFILE=""
OVERWRITING=0 # <TODO> defaultly we will overwrite ?
DONOTBACKUP=0
DONOTUPLOAD=1
TRIALDRYRUN=0
RESUMEINDEX=0
STARTSOURCE=0 # <Added> start from id
FINALSOURCE=-1 # <Added> final upto id
#echo CURRENTBAND=$CURRENTBAND
#echo CATALOGFILE=$CATALOGFILE
#echo EXCLUDEFILE=$EXCLUDEFILE
#exit
# 
if [[ $* == *-cleanall*    ]]; then 
    echo Clean all!!!
    rm -r fit_chi_HDFN
    rm -r fit_matrix_HDFN 
    rm -r fit_parallel_HDFN
    rm -r fit_plots_HDFN
    rm -r run_*.sh.{o,e}*
    exit
fi
# 
# start from and finish up to some sources
if [[ $* == *-overwrite*      ]]; then OVERWRITING=1; fi
if [[ $* == *-donotoverwrite* ]]; then OVERWRITING=1; fi
if [[ $* == *-donotbackup*    ]]; then DONOTBACKUP=1; fi
if [[ $* == *-donotupload*    ]]; then DONOTUPLOAD=1; fi
if [[ $* == *-dryrun*         ]]; then TRIALDRYRUN=1; fi
if [[ $* == *-catalog*        ]]; then CATALOGFILE=$(echo $* | sed -e 's/.*-catalog[ ]*\([^ ]*\).*/\1/g'); echo CATALOGFILE=$CATALOGFILE; echo "We will use catalog file $CATALOGFILE!"; fi
if [[ $* == *-sedpred*        ]]; then EXCLUDEFILE=$(echo $* | sed -e 's/.*-sedpred[^ ]*[ ]*\([^ ]*\).*/\1/g'); echo EXCLUDEFILE=$EXCLUDEFILE; echo "We will use sedpredict file $EXCLUDEFILE!"; fi
if [[ $* == *-resume*         ]]; then RESUMEINDEX=$(echo $* | sed -e 's/.*-resume[ ]*\([^ ]*\).*/\1/g'); echo RESUMEINDEX=$RESUMEINDEX; if [[ $RESUMEINDEX != *[[:digit:]]* ]]; then echo "Error! -resume parameter invalid!"; exit; else echo "We will resume from $RESUMEINDEX (not including)!"; fi; fi
if [[ $* == *-start*          ]]; then STARTSOURCE=$(echo $* | sed -e 's/.*-start[ ]*\([^ -]*\).*/\1/g'); echo STARTSOURCE=$STARTSOURCE; if [[ $STARTSOURCE != *[[:digit:]]* ]]; then echo "Error! -start parameter invalid!"; exit; else echo "We will start from $STARTSOURCE (including)!"; fi; fi
if [[ $* == *-begin*          ]]; then STARTSOURCE=$(echo $* | sed -e 's/.*-begin[ ]*\([^ -]*\).*/\1/g'); echo STARTSOURCE=$STARTSOURCE; if [[ $STARTSOURCE != *[[:digit:]]* ]]; then echo "Error! -begin parameter invalid!"; exit; else echo "We will start from $STARTSOURCE (including)!"; fi; fi
if [[ $* == *-from*           ]]; then STARTSOURCE=$(echo $* | sed -e 's/.*-from[ ]*\([^ -]*\).*/\1/g'); echo STARTSOURCE=$STARTSOURCE; if [[ $STARTSOURCE != *[[:digit:]]* ]]; then echo "Error! -from parameter invalid!"; exit; else echo "We will start from $STARTSOURCE (including)!"; fi; fi
if [[ $* == *-finish*         ]]; then FINALSOURCE=$(echo $* | sed -e 's/.*-finish[ ]*\([^ -]*\).*/\1/g'); echo FINALSOURCE=$FINALSOURCE; if [[ $FINALSOURCE != *[[:digit:]]* ]]; then echo "Error! -finish parameter invalid!"; exit; else echo "We will finish upto $FINALSOURCE (including)!"; fi; fi
if [[ $* == *-upto*           ]]; then FINALSOURCE=$(echo $* | sed -e 's/.*-upto[ ]*\([^ -]*\).*/\1/g'); echo FINALSOURCE=$FINALSOURCE; if [[ $FINALSOURCE != *[[:digit:]]* ]]; then echo "Error! -upto parameter invalid!"; exit; else echo "We will finish upto $FINALSOURCE (including)!"; fi; fi
if [[ $* == *-end*            ]]; then FINALSOURCE=$(echo $* | sed -e 's/.*-end[ ]*\([^ -]*\).*/\1/g'); echo FINALSOURCE=$FINALSOURCE; if [[ $FINALSOURCE != *[[:digit:]]* ]]; then echo "Error! -end parameter invalid!"; exit; else echo "We will finish upto $FINALSOURCE (including)!"; fi; fi
#exit
# 
# 
if [[ $DONOTBACKUP -eq 1 ]]; then echo 'We will not backup old SED results!!'; fi
# 
if [[ -f $CATALOGFILE ]]; then runsedid=$(cat $CATALOGFILE | grep -v '#' | sed 's/^[ ]*//g' | tr -s ' ' | cut -d ' ' -f $CATALOGIDCN); else echo Error! $CATALOGFILE not found!; exit; fi
if [[ -f $EXCLUDEFILE ]]; then runsedid=$(cat $EXCLUDEFILE | grep -v '#' | sed 's/^[ ]*//g' | tr -s ' ' | cut -d ' ' -f 1,4 | grep '[0-9]* 0$' | cut -d ' ' -f 1); echo We are updating $(wc -l <<< "$runsedid") sources!; fi
### http://stackoverflow.com/questions/6314679/in-bash-how-do-i-count-the-number-of-lines-in-a-variable
#exit
# 
# 
# 
if [[ $(echo echo OK | sm 2>/dev/null) != OK ]]; then
    echo 
    echo 
    echo "Error! supermongo \"sm\" command was not working! Please check the installation of supermongo!"
    echo 
    echo 
    exit 1
fi
if [[ ! -d Magdis ]]; then
    echo 
    echo 
    echo "Error! SED library dir \"Magdis/\" was not found under current dir $PWD!"
    echo 
    echo 
    exit 1
fi
if [[ ! -d fit_parallel_HDFN ]]; then
    mkdir fit_parallel_HDFN
fi
# 
# 
# 
if [[ $* == *-postparallel* ]]; then
    RUNQSUBDLIU_PARA=2
    echo 
    echo Do post parallel!
    echo 
    echo -n "rm *.sh.o* "
    rm *.sh.o*
    echo -n "rm *.sh.e* "
    rm *.sh.e*
    ResLMTOutput="ResLMT_parallel_$CATALOGFILE"
    ResLMFOutput="ResLMTfluxes_parallel_$CATALOGFILE"
    ResLMPOutput="ResLMTparams_parallel_$CATALOGFILE"
    rm $ResLMTOutput
    rm $ResLMFOutput
    echo 
else
    RUNQSUBDLIU_PARA=0
fi
# 
# 
# 
for i in $runsedid; do
    # 
    # <todo><debug> $i -lt 16502
    # 
    # 
    # start from and finish up to some sources
    if [[ $i -le $RESUMEINDEX ]]; then
        continue
    fi
    if [[ $STARTSOURCE -ge 0 && $i -lt $STARTSOURCE ]]; then
        continue
    fi
    if [[ $FINALSOURCE -ge $STARTSOURCE && $i -gt $FINALSOURCE ]]; then
        continue
    fi
    # 
    if [[ $RUNQSUBDLIU_PARA == 2 ]]; then
        if [[ -f "fit_parallel_HDFN/ResLMTfluxes_$i.txt" ]]; then
            if [[ ! -f $ResLMTOutput ]]; then 
            cat "fit_parallel_HDFN/ResLMT_$i.txt" | sed -n '1,2p' > $ResLMTOutput; fi
            cat "fit_parallel_HDFN/ResLMT_$i.txt" | sed -n '3p'  >> $ResLMTOutput
            if [[ ! -f $ResLMFOutput ]]; then 
            cat "fit_parallel_HDFN/ResLMTfluxes_$i.txt" | sed -n '1,2p' > $ResLMFOutput; fi
            cat "fit_parallel_HDFN/ResLMTfluxes_$i.txt" | sed -n '3p'  >> $ResLMFOutput
            if [[ ! -f $ResLMPOutput ]]; then 
            cat "fit_parallel_HDFN/fit_$i.csv" | sed -n '1,2p' > $ResLMPOutput; fi
            cat "fit_parallel_HDFN/fit_$i.csv" | sed -n '3p'  >> $ResLMPOutput
        else
            echo 
            echo Error! fit_parallel_HDFN/ResLMTfluxes_$i.txt does not exist!
            echo 
            exit 1
        fi
    else
        if [[ ! -f fit_plots_HDFN/Plot_SED_${i}.pdf || $OVERWRITING == 1 ]]; then
            # try backup older SED results
            if [[ $DONOTBACKUP -eq 0 ]]; then
                if [[ -f fit_parallel_HDFN/log_${i}.txt && ! -f fit_parallel_HDFN/log_${i}_before${CURRENTBAND}.txt ]]; then echo 
          echo Backupped fit_parallel_HDFN/log_${i}.txt as      fit_parallel_HDFN/log_${i}_before${CURRENTBAND}.txt !
                      cp fit_parallel_HDFN/log_${i}.txt         fit_parallel_HDFN/log_${i}_before${CURRENTBAND}.txt
                fi
                if [[ -f fit_parallel_HDFN/run_${i}.sh && ! -f fit_parallel_HDFN/run_${i}_before${CURRENTBAND}.sh ]]; then
          echo Backupped fit_parallel_HDFN/run_${i}.sh as      fit_parallel_HDFN/run_${i}_before${CURRENTBAND}.sh !
                      cp fit_parallel_HDFN/run_${i}.sh         fit_parallel_HDFN/run_${i}_before${CURRENTBAND}.sh
                fi
                if [[ -f fit_parallel_HDFN/fit_${i}.csv && ! -f fit_parallel_HDFN/fit_${i}_before${CURRENTBAND}.csv ]]; then
          echo Backupped fit_parallel_HDFN/fit_${i}.csv as      fit_parallel_HDFN/fit_${i}_before${CURRENTBAND}.csv !
                      cp fit_parallel_HDFN/fit_${i}.csv         fit_parallel_HDFN/fit_${i}_before${CURRENTBAND}.csv
                fi
                if [[ -f fit_parallel_HDFN/sfr_${i}.csv && ! -f fit_parallel_HDFN/sfr_${i}_before${CURRENTBAND}.csv ]]; then 
          echo Backupped fit_parallel_HDFN/sfr_${i}.csv as      fit_parallel_HDFN/sfr_${i}_before${CURRENTBAND}.csv !
                      cp fit_parallel_HDFN/sfr_${i}.csv         fit_parallel_HDFN/sfr_${i}_before${CURRENTBAND}.csv
                fi
                if [[ -f fit_plots_HDFN/Plot_SED_${i}.pdf && ! -f fit_plots_HDFN/Plot_SED_${i}_before${CURRENTBAND}.pdf ]]; then
          echo Backupped fit_plots_HDFN/Plot_SED_${i}.pdf as      fit_plots_HDFN/Plot_SED_${i}_before${CURRENTBAND}.pdf !
                      cp fit_plots_HDFN/Plot_SED_${i}.pdf         fit_plots_HDFN/Plot_SED_${i}_before${CURRENTBAND}.pdf ; echo 
                fi
            fi
            echo "-------------------------------------------------------------------------------------"
            echo "#!/bin/bash -e" > "fit_parallel_HDFN/run_$i.sh"
            echo "echo \$(date +%Y-%m-%d:%H:%M:%S)" >> "fit_parallel_HDFN/run_$i.sh"
            echo "cd $PWD" >> "fit_parallel_HDFN/run_$i.sh"
            echo "echo \$PATH" >> "fit_parallel_HDFN/run_$i.sh"
            #if [[ $(echo echo OK | sm 2>/dev/null) != OK ]]; then
            #echo "source /dsm/upgal/data/dliu/Software/sm/resolve_sm" >> "fit_parallel_HDFN/run_$i.sh"
            #fi
            echo "echo CATALOGFILE=$CATALOGFILE" >> "fit_parallel_HDFN/run_$i.sh"
            echo "echo EXCLUDEFILE=$EXCLUDEFILE" >> "fit_parallel_HDFN/run_$i.sh"
            if [[ $(hostname) == *planer* ]]; then
	            echo "export PATH=/dsm/upgal/data/dliu/supermongo/bin:\$PATH" >> "fit_parallel_HDFN/run_$i.sh"
                echo "echo macro read AGN_N.sm AGN_Parallel $CATALOGFILE $i | sm -f /dsm/upgal/data/dliu/supermongo/lib/sm/.sm | tee fit_parallel_HDFN/log_$i.txt" >> "fit_parallel_HDFN/run_$i.sh"
            else
                echo "echo macro read AGN_N.sm AGN_Parallel $CATALOGFILE $i | sm | tee fit_parallel_HDFN/log_$i.txt" >> "fit_parallel_HDFN/run_$i.sh"
            fi
            chmod a+x "fit_parallel_HDFN/run_$i.sh"
            cat "fit_parallel_HDFN/run_$i.sh"
            echo "-------------------------------------------------------------------------------------"
            if [[ $TRIALDRYRUN == 0 ]]; then
                if [[ $(hostname) != *planer* && $(hostname) != *coast* ]]; then 
                    echo $(hostname)
                    ./"fit_parallel_HDFN/run_$i.sh"
                    sleep 1.5
                fi
                if [[ $(hostname) == *planer* ]]; then 
                    echo $(hostname)
                    echo Counting qsub task "$(showq | grep $USER | wc -l)"
                    echo Counting qsub task "$(showq | grep $USER | wc -l)"
                    while      [[   30  -le "$(showq | grep $USER | wc -l)" ]]; do
                    sleep           12
                    echo Counting qsub task "$(showq | grep $USER | wc -l)"
                    done
                    echo                "$PWD/fit_parallel_HDFN/run_$i.sh"
                    cat                      "fit_parallel_HDFN/run_$i.sh"
                    echo -n Adding qsub task "fit_parallel_HDFN/run_$i.sh" : ''
                    qsub -l walltime=3:15:00 "fit_parallel_HDFN/run_$i.sh"
                    echo Sleeping 3s
                    sleep 3
                fi
            fi
        else
            echo 
            echo Warning! fit_plots_HDFN/Plot_SED_${i}.pdf exists, we will not execute fit_parallel_HDFN/run_$i.sh!
            echo 
        fi
    fi
done
# 
# 
# 
if [[ $RUNQSUBDLIU_PARA == 2 ]]; then
    echo 
    echo Output to $ResLMTOutput
    echo 
    echo Output to $ResLMFOutput
    echo 
    echo Output to $ResLMPOutput
    echo 
    tail Res{LMT,LMTfluxes}_parallel_$CATALOGFILE
    echo 
    echo Done!
fi
