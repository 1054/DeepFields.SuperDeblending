#!/bin/bash
# 
# common caller for dzliu tools:
#=  CrabFitsHeader
#=  CrabFitsImageArithmetic
#=  CrabFitsImageCrop
#=  CrabFitsImageCopy
#=  CrabPhotAperPhot
#=  CrabPhotRingPhot
#=  CrabPhotImageStatistics
#=  CrabPhotMonteCarlo
#=  CrabTableReadColumn
#=  CrabTableReadInfo
#=  degree2radec
#=  radec2degree
#=  lumdist
#=  ttyecho
#=  xpaaccess
#=  xpaget
#=  xpainfo
#=  xpamb
#=  xpans
#=  xpaset
# 
# for ff in $(cat CrabFitsHeader | grep "^#= " | tr -s ' ' | cut -d ' ' -f 2); do cp CrabFitsHeader $ff; done
# 
# Linux
if [[ $(uname -s) == Linux ]]; then
    # 
    # Get system glibc version
    ldd_version_major=$(ldd --version | head -n 1 | tr -s ' ' | cut -d ' ' -f 4 | cut -d '.' -f 1)
    ldd_version_minor=$(ldd --version | head -n 1 | tr -s ' ' | cut -d ' ' -f 4 | cut -d '.' -f 2)
    # 
    # Check gcc libstdc++.so required glibc version
    libstdcpp_file=$(ldd $(dirname ${BASH_SOURCE[0]})/ds9_linux_Glibc_2.12/$(basename ${BASH_SOURCE[0]})_linux_x86_64 | grep "libstdc++.so.6" | sed -e 's/^ *//g' | tr -s ' ' | cut -d ' ' -f 3)
    if [[ "$libstdcpp_file"x != x ]]; then
        list_glibc_versions=($(objdump -p "$libstdcpp_file" | grep "GLIBC_" | sed -e 's/^ *//g' | tr -s ' ' | cut -d ' ' -f 4 | sed -e 's/GLIBC_//g' | sort -t'.' -k2 -r))
        if [[ ${#list_glibc_versions[@]} -gt 0 ]]; then
            glibc_version_major=$(echo "${list_glibc_versions[0]}" | cut -d '.' -f 1)
            glibc_version_minor=$(echo "${list_glibc_versions[0]}" | cut -d '.' -f 2)
            if [[ $glibc_version_major -gt $ldd_version_major ]] || ([[ $glibc_version_major -eq $ldd_version_major ]] && [[ $glibc_version_minor -gt $ldd_version_minor ]]); then
                if [[ -d "$(dirname ${BASH_SOURCE[0]})/lib64_linux_GLIBC_${glibc_version_major}_${glibc_version_minor}"  ]]; then
                    # if the gcc on the current machine requires a higher GLIBC version than the operation system has, 
                    # we try to use our stored lib64_linux_GLIBC_2_*/libc.so.6
                    echo export LD_LIBRARY_PATH="$(dirname ${BASH_SOURCE[0]})/lib64_linux_GLIBC_${glibc_version_major}_${glibc_version_minor}:$LD_LIBRARY_PATH"
                    export LD_LIBRARY_PATH="$(dirname ${BASH_SOURCE[0]})/lib64_linux_GLIBC_${glibc_version_major}_${glibc_version_minor}:$LD_LIBRARY_PATH"
                    ldd "$(dirname ${BASH_SOURCE[0]})/ds9_linux_Glibc_2.12/$(basename ${BASH_SOURCE[0]})_linux_x86_64"
                    #ldd "$(dirname ${BASH_SOURCE[0]})/ds9_linux_Glibc_2.14/$(basename ${BASH_SOURCE[0]})_linux_x86_64"
                    # 
                    ldd_version_major=$glibc_version_major
                    ldd_version_minor=$glibc_version_minor
                #else
                #    # print error <TODO>
                fi
            fi
        fi
    fi
    # 
    if [[ "$ldd_version_major" == "2" ]] && [[ $(bc <<< "$ldd_version_minor < 14") -eq 1 ]]; then
        # if the GLIBC version is less equal 2.14
        echo ldd "$(dirname ${BASH_SOURCE[0]})/ds9_linux_Glibc_2.12/$(basename ${BASH_SOURCE[0]})_linux_x86_64"
        ldd "$(dirname ${BASH_SOURCE[0]})/ds9_linux_Glibc_2.12/$(basename ${BASH_SOURCE[0]})_linux_x86_64"
        $(dirname ${BASH_SOURCE[0]})/ds9_linux_Glibc_2.12/$(basename ${BASH_SOURCE[0]})_linux_x86_64 "$@"
        # 
    else
        # else if the GLIBC version is higher than 2.14
        echo ldd "$(dirname ${BASH_SOURCE[0]})/ds9_linux_Glibc_2.14/$(basename ${BASH_SOURCE[0]})_linux_x86_64"
        ldd "$(dirname ${BASH_SOURCE[0]})/ds9_linux_Glibc_2.14/$(basename ${BASH_SOURCE[0]})_linux_x86_64"
        $(dirname ${BASH_SOURCE[0]})/ds9_linux_Glibc_2.14/$(basename ${BASH_SOURCE[0]})_linux_x86_64 "$@"
        # 
    fi
fi
# Darwin
if [[ $(uname -s) == Darwin ]]; then
    $(dirname ${BASH_SOURCE[0]})/ds9_mac/$(basename ${BASH_SOURCE[0]})_mac "$@"
fi
# Cygwin
if [[ $(uname -s) == *CYGWIN* ]]; then
    $(dirname ${BASH_SOURCE[0]})/ds9_cygwin/$(basename ${BASH_SOURCE[0]})_cygwin_x86.exe "$@"
fi



