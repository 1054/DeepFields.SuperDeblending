read_data 00
    load astroGalfit.sm
    data "prior_x_y.txt" read {_px 1 _py 2}
    set _id = 0,dimen(_px)-1
    set _se = (_px>0 && _py>0)
    if(sum(_se) > 0) {
        set id = _id if(_se)
        set px = _px if(_se)
        set py = _py if(_se)
        if(is_file("No_catalog_source_within_image")) {!rm "No_catalog_source_within_image"}
    } else {
        print "No_catalog_source_within_image" 'No catalog source within image.\n' {}
        exit
    }


read_pixscale 00
    if(is_file("image_sci_pixscale.txt")) {
        if(is_vector(pixscale)) {unset pixscale}
        data "image_sci_pixscale.txt" read {pixscale 1}
        if(!is_vector(pixscale)) {!rm "image_sci_pixscale.txt"} # added a check here
    }
    if(!is_file("image_sci_pixscale.txt")) {
        !pixscale "image_sci.fits" > "image_sci_pixscale.txt"
    }
    if(!is_file("image_sci_pixscale.txt")) {
        echo "Error! Failed to get pixscale from the image_sci.fits! Failed to read image_sci_pixscale.txt! Exit!"
        exit
    }
    data "image_sci_pixscale.txt" read {pixscale 1}


read_pixnoise 00
    if(is_file("image_sci_pixnoise.txt")) {
        if(is_vector(pixnoise)) {unset pixnoise}
        data "image_sci_pixnoise.txt" read {pixnoise 1}
        if(!is_vector(pixnoise)) {!rm "image_sci_pixnoise.txt"} # added a check here
    }
    if(!is_file("image_sci_pixnoise.txt")) {
        !CrabPhotImageStatistics "image_sci.fits" > "image_sci_pixstats.txt"
        data "image_sci_pixstats.txt" read {pixstats 7}
        define print_noheader 1
        print "image_sci_pixnoise.txt" '%g\n' {pixstats}
        define print_noheader 0
    }
    if(!is_file("image_sci_pixnoise.txt")) {
        echo "Error! Failed to get pixnoise from the image_sci.fits! Failed to read image_sci_pixnoise.txt! Exit!"
        exit
    }
    data "image_sci_pixnoise.txt" read {pixnoise 1}


calc_beamarea 00
    if(is_file("image_sci_beamarea.txt")) {
        !mv "image_sci_beamarea.txt" "image_sci_beamarea.txt.backup"
    }
    if(is_vector(beamarea)) {
        unset beamarea
    }
    if(is_file("image_sci.fits")) {
        !gethead "image_sci.fits" "BMAJ" "BMIN" "BPA" > "image_sci_beamarea.tmp"
        verbose 0
        if(is_vector(tmp_bmaj)) {unset tmp_bmaj}
        if(is_vector(tmp_bmin)) {unset tmp_bmin}
        if(is_vector(tmp_bpa)) {unset tmp_bpa}
        data "image_sci_beamarea.tmp" read {tmp_bmaj 1 tmp_bmin 2 tmp_bpa 3}
        if(is_vector(tmp_bmaj) && is_vector(tmp_bmin) && is_vector(tmp_bpa)) {
            set beamarea = pi/(4.0*ln(2)) * (tmp_bmaj*3600.0 * tmp_bmin*3600.0) # arcsec-square
            define print_noheader 1
            print "image_sci_beamarea.txt" '%g\n' {beamarea}
            define print_noheader 0
        }
        verbose 1
    }


calc_sky_frequency 00
    if(is_file("image_sci_sky_frequency.txt")) {
        !mv "image_sci_sky_frequency.txt" "image_sci_sky_frequency.txt.backup"
    }
    if(is_file("image_sci.fits")) {
        !gethead "image_sci.fits" "CTYPE3" "CRPIX3" "CRVAL3" > "image_sci_sky_frequency.tmp"
        verbose 0
        if(is_vector(sky_frequency)) {unset sky_frequency}
        if(is_vector(sky_freq_type)) {unset sky_freq_type}
        data "image_sci_sky_frequency.tmp" 
        read {sky_freq_type 1.s sky_frequency 3}
        if(is_vector(sky_freq_type) && is_vector(sky_frequency)) {
            if(index(sky_freq_type,'FREQ')==0) {
                set sky_frequency = sky_frequency/1e9 # GHz
                define print_noheader 1
                print "image_sci_sky_frequency.txt" '%15.10f \# GHz\n' {sky_frequency}
                define print_noheader 0
            }
        }
        verbose 1
    }


calc_phase_center 00
    if(is_file("image_sci_phase_center.txt")) {
        !mv "image_sci_phase_center.txt" "image_sci_phase_center.txt.backup"
    }
    if(is_file("image_sci.fits")) {
        !gethead "image_sci.fits" "CTYPE1" "CRPIX1" "CRVAL1" "CTYPE2" "CRPIX2" "CRVAL2" > "image_sci_phase_center.tmp"
        verbose 0
        if(is_vector(phase_center_type1)) {unset phase_center_type1}
        if(is_vector(phase_center_type2)) {unset phase_center_type2}
        if(is_vector(phase_center_ra)) {unset phase_center_ra}
        if(is_vector(phase_center_dec)) {unset phase_center_dec}
        if(is_vector(phase_center_x)) {unset phase_center_x}
        if(is_vector(phase_center_y)) {unset phase_center_y}
        data "image_sci_phase_center.tmp" 
        read {phase_center_type1 1.s phase_center_x 2.f phase_center_ra 3.f phase_center_type2 4.s phase_center_y 5.f phase_center_dec 6.f}
        if(is_vector(phase_center_ra) && is_vector(phase_center_dec)) {
            if(index(phase_center_type1,'RA')==0 && index(phase_center_type2,'DEC')==0) {
                define print_noheader 1
                print "image_sci_phase_center.txt" '%15.10f %15.10f %15.3f %15.3f\n' {phase_center_ra phase_center_dec phase_center_x phase_center_y}
                define print_noheader 0
            }
        }
        verbose 1
    }


calc_primary_beam_correction 00
    if(is_file("image_sci_primary_beam_correction.txt")) {
        !mv "image_sci_primary_beam_correction.txt" "image_sci_primary_beam_correction.txt.backup"
    }
    if(is_vector(phase_center_x) && is_vector(phase_center_y) && is_vector(sky_frequency) && is_vector(px) && is_vector(py) && is_vector(pixscale)) {
        # https://safe.nrao.edu/wiki/bin/view/ALMA/PrimaryBeamArcsec
        # Computes the expected FWHM of a single dish beam by implementing the Baars formula (b*lambda / D), where b is taken either from Equation 18 in ALMA Memo 456 (http://legacy.nrao.edu/alma/memos/html-memos/abstracts/abs456.html):
        # where b = 1.243 - 0.343*10**(-0.05*taper) + 0.12*(10**(-0.05*taper))**2
        # or by Equation 4.13 in Baars (2007) book:
        # where b = 1.269 - 0.566*tau + 0.534*(tau)**2 - 0.208*(tau)**3
        # 
        set primary_beam_disq = ((phase_center_x-px)**2 + (phase_center_y-py)**2) * pixscale**2 # arcsec
        set primary_beam_dist = sqrt(primary_beam_disq) # arcsec
        # 
        set sky_wavelength = 2.99792458e5/sky_frequency # um
        set primary_beam_diam = 12.0 # ALMA 12m
        #set primary_beam_tape = 10.0 # https://safe.nrao.edu/wiki/bin/view/ALMA/AlmaPrimaryBeamCorrection
        #set primary_beam_bpar = 1.243 - 0.343 * primary_beam_tape + 0.12 * primary_beam_tape**2 # http://legacy.nrao.edu/alma/memos/html-memos/alma456/memo456.pdf -- Eq(18)
        set primary_beam_bpar = 1.13
        set primary_beam_fwhm = primary_beam_bpar * sky_wavelength / (primary_beam_diam*1e6) / pi * 180.0 * 3600.0 # arcsec
        set primary_beam_attenuation = exp((-primary_beam_disq)/(primary_beam_fwhm**2))
        set primary_beam_correction = 1.0/primary_beam_attenuation
        define print_noheader 1
        print "image_sci_primary_beam_correction.txt" '%20g %20g %20g\n' {primary_beam_correction primary_beam_dist primary_beam_fwhm}
        define print_noheader 0
    }










go_getpix
    read_data
    read_pixscale
    read_pixnoise
    # 
    set radius = 1.5 / pixscale
    set rad = px * 0.0 + radius
    set cat_index = float(id) # this is the catalog index from 0 to dimen(catalog)-1, not catalog object id itself
    # 
    #<20170606># added outputing cat_id
    if(is_file("prior_id.txt")) {
        data "prior_id.txt" read {cat_id_full 1.s}
        set cat_id = cat_id_full[cat_index]
    } else {
        set cat_id = cat_index>=0 ? '-99' : '-99'
    }
    print "getpix.input" '%15.3f %15.3f %15.3f %15.0f %15s\n' {px py rad cat_index cat_id}
    
    !CrabPhotAperPhot -header-in-comment "image_sci.fits" "null" "getpix.input" > "getpix.output"
    #!cat "getpix.input"
    #!cat "getpix.output"
    data "getpix.output" read {pix_num 4 pix_sum 5 pix_max 7}
    if(dimen(pix_num)>0) {
        # 
        # print results
        print "getpix.txt" '%15g %15g %15g %15.3f %15.3f %15.3f %15.0f %15s\n' {pix_max pix_sum pix_num px py rad cat_index cat_id}
        # 
        # # 
        # # prepare big array for output
        # set pixel_max = float(_id)*0.0 -99
        # set pixel_sum = float(_id)*0.0 -99
        # set pixel_num = float(_id)*0.0 -99
        # set pixel_x   = float(_id)*0.0 -99
        # set pixel_y   = float(_id)*0.0 -99
        # set pixel_rad = float(_id)*0.0 -99
        # # 
        # # store results into big array
        # set pixel_max[id] = pix_max
        # set pixel_sum[id] = pix_sum
        # set pixel_num[id] = pix_num
        # set pixel_x[id]   = px
        # set pixel_y[id]   = py
        # set pixel_rad[id] = rad
        # set pixel_id      = _id
        # # 
        # # print results
        # print "getpix.txt" '%15g %15g %15g %15.3f %15.3f %15.3f %15.0f\n' {pixel_max pixel_sum pixel_num pixel_x pixel_y pixel_rad pixel_id}
        # #!cat "getpix.txt"
        # 
        # calc primary beam attenuation correction
        calc_sky_frequency
        calc_phase_center
        calc_primary_beam_correction
    }


go_getpix_on_negative_image
    read_data
    read_pixscale
    read_pixnoise
    # 
    set radius = 1.5 / pixscale
    set rad = px * 0.0 + radius
    set cat_index = float(id) # this is the catalog index from 0 to dimen(catalog)-1, not catalog object id itself
    # 
    #<20170606># added outputing cat_id
    if(is_file("prior_id.txt")) {
        data "prior_id.txt" read {cat_id_full 1.s}
        set cat_id = cat_id_full[cat_index]
    } else {
        set cat_id = cat_index>=0 ? '-99' : '-99'
    }
    print "getpix_on_negative_image.input" '%15.3f %15.3f %15.3f %15.0f %15s\n' {px py rad cat_index cat_id}
    
    !CrabPhotAperPhot -header-in-comment "image_negative.fits" "null" "getpix_on_negative_image.input" > "getpix_on_negative_image.output"
    #!cat "getpix_on_negative_image.input"
    #!cat "getpix_on_negative_image.output"
    data "getpix_on_negative_image.output" read {pix_num 4 pix_sum 5 pix_max 7}
    if(dimen(pix_num)>0) {
        # 
        # print results
        print "getpix_on_negative_image.txt" '%15g %15g %15g %15.3f %15.3f %15.3f %15.0f %15s\n' {pix_max pix_sum pix_num px py rad cat_index cat_id}
    }









print_result
    if(!is_file("No_catalog_source_within_image")) {
        read_pixscale
        read_pixnoise
        calc_beamarea
        # 
        if(is_file("getpix.result")) {
            !mv "getpix.result" "getpix.result.backup"
        }
        # 
        if(is_file("getpix.txt")) {
            data "getpix.txt" read {pix_max 1.f pix_sum 2.f pix_num 3.f cat_index 7.f cat_id 8.s}
            # 
            # print further results with flux unit Jy/beam (f_peak) or Jy (f_int)
            if(is_vector(pixscale) && is_vector(beamarea)) {
                if(pixscale>0 && beamarea>0) {
                    set f_peak = pix_max
                    set f_int = pix_sum / beamarea * (pixscale*pixscale)
                    set err_peak = pixnoise
                    set err_int = pixnoise * sqrt(pix_num) / beamarea * (pixscale*pixscale)
                    set snr_peak = (f_peak>0) ? (f_peak / err_peak) : 0.0
                    set snr_int = (f_int>0) ? (f_int / err_int) : 0.0
                    print "getpix.result" '%15g %15g %15g %15g %15.0f %15s\n' {f_peak f_int snr_peak snr_int cat_index cat_id}
                } else {
                    print 'Error! Negative pixscale or beamarea value! Failed to run \"go_getpix.sm\" subroutine \"print_result\"!\n' {}
                }
            } else {
                print 'Error! Failed to read pixscale and beamarea! Failed to run \"go_getpix.sm\" subroutine \"print_result\"!\n' {}
            }
        } else {
            print 'Error! \"getpix.txt\" was not found under current directory! Failed to run \"go_getpix.sm\" subroutine \"print_result\"!\n' {}
        }
    }


print_result_on_negative_image
    if(!is_file("No_catalog_source_within_image")) {
        read_pixscale
        read_pixnoise
        calc_beamarea
        # 
        if(is_file("getpix_on_negative_image.result")) {
            !mv "getpix_on_negative_image.result" "getpix_on_negative_image.result.backup"
        }
        # 
        if(is_file("getpix_on_negative_image.txt")) {
            data "getpix_on_negative_image.txt" read {pix_max 1.f pix_sum 2.f pix_num 3.f cat_index 7.f cat_id 8.s}
            # 
            # print further results with flux unit Jy/beam (f_peak) or Jy (f_int)
            if(is_vector(pixscale) && is_vector(beamarea)) {
                if(pixscale>0 && beamarea>0) {
                    set f_peak = pix_max
                    set f_int = pix_sum / beamarea * (pixscale*pixscale)
                    set err_peak = pixnoise
                    set err_int = pixnoise * sqrt(pix_num) / beamarea * (pixscale*pixscale)
                    set snr_peak = (f_peak>0) ? (f_peak / err_peak) : 0.0
                    set snr_int = (f_int>0) ? (f_int / err_int) : 0.0
                    print "getpix_on_negative_image.result" '%15g %15g %15g %15g %15.0f %15s\n' {f_peak f_int snr_peak snr_int cat_index cat_id}
                } else {
                    print 'Error! Negative pixscale or beamarea value! Failed to run \"go_getpix.sm\" subroutine \"print_result_on_negative_image\"!\n' {}
                }
            } else {
                print 'Error! Failed to read pixscale and beamarea! Failed to run \"go_getpix.sm\" subroutine \"print_result_on_negative_image\"!\n' {}
            }
        } else {
            print 'Error! \"getpix_on_negative_image.txt\" was not found under current directory! Failed to run \"go_getpix.sm\" subroutine \"print_result_on_negative_image\"!\n' {}
        }
    }





