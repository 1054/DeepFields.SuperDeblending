Simu_demo 00
    data "......."
    read {idF 3 raF 1 deF 2}
    goSS
    SimuX



gop 02
    limits $1 $2 erase box points $1 $2

goi 02
    limits $1 $2 erase box histogram  $1 $2

goSS 00    
    ###<Added><DzLIU><20170510>###
    ###<Added><DzLIU><20141123>###
    if($?doPostParallel) {
        if($doPostParallel!=0) {
            data "xpriorGN_RAD_"$imax"_"$xdate".txt"
            read {Xid_ 1 Xra_ 2 Xde_ 3}
            set x_si = Xra_
            set y_si = Xde_
            set fix1_si = x_si*0.0
            set fix2_si = y_si*0.0
            return
        } else {
            undef doPostParallel
        }
    }
    if($vary_positions) {
        #echo ""
        echo "We are running in vary_positions mode!"
        echo ""
        data "xpriorGN_RAD_"$imax"_"$xdate".txt"
        read {Xid_ 1 Xra_ 2 Xde_ 3}
        set x_si = Xra_
        set y_si = Xde_
        data "xpriorGN_MAG_"$imax"_"$xdate".txt"
        read {x_si 1.f y_si 2.f x_si_ 3.f y_si_ 4.f mag_si 5.f}
        data "xsimuGN_OUT_"$imax"_"$xdate".txt" 
        read {mm_si 4 ee_si 5}
        set fix1_si = ee_si<=.05 && ee_si>=0
        set fix2_si = fix1_si
        set xm_si = fix1_si ? mm_si : $mag_start
        set xm_si = xm_si > $mag_toofaint ? $mag_toofaint : xm_si
        !cp "xpriorGN_RAD_"$imax"_"$xdate".txt" "xpriorGN_RAD_"$imax"_"$xdate"_vary.txt"
        !cp "xpriorGN_MAG_"$imax"_"$xdate".txt" "xpriorGN_MAG_"$imax"_"$xdate"_vary.txt"
        return
    }

    ###<Added><DzLIU><20141123>###
    ###<Added><DzLIU><20170510>###
    
    device x11
    
    #<20170801># 
    echo Doing xdo_sizes for $imax_name
    macro read goFineDL.sm xdo_sizes
    echo Done  xdo_sizes NAXIS1=$imax_xsize NAXIS2=$imax_ysize
    !echo 1 1 > aaa_goSS_xy2sky_input
    !echo $imax_xsize $imax_ysize >> aaa_goSS_xy2sky_input
    !xy2sky -d -n 10 $imax_name.fits @aaa_goSS_xy2sky_input > aaa_goSS_xy2sky_output
    verbose 0 data aaa_goSS_xy2sky_output read {Xra_range 1 Xde_range 2} verbose 1
    
    gop raF deF
    
    #set Xra = 189.17+X/60/.46-.0
    #set Xde = 62.08+Y/60-.0
    #set Xra = 189.2026526+X/60/.46-.0  # HDFN scan simulation
    #set Xde = 62.2043939+Y/60-.0  # HDFN scan simulation 
    set ran_id = random($Nsimu) * dimen(raF)
    set Xra = raF[ran_id] + (random(1)-0.5) * (30.0/3600.0) / cos(deF[ran_id]/180.0*pi)
    set Xde = deF[ran_id] + (random(1)-0.5) * (30.0/3600.0)
    
    ###<Modified><DZLIU>### sky2xy
    !\rm aaa_goSS_sky2xy_* 2>/dev/null
    if($?print_noheader==1) {define pref_noheader $print_noheader} else {define pref_noheader 0} ###<Modified><20140401><DZLIU>
    define print_noheader 1                                                                      ### <Modified><20140318><DZLIU>
    print  aaa_goSS_sky2xy_input  '%17.7f %17.7f\n'  { Xra Xde }
    define print_noheader $pref_noheader                                                         ### <Modified><20140401><DZLIU>
    echo Doing sky2xy for $(dimen(Xra)) sources in goSS ...
    !sky2xy -j $imax_name.fits @aaa_goSS_sky2xy_input > aaa_goSS_sky2xy_output
    echo Done  sky2xy
    verbose 0 data aaa_goSS_sky2xy_output read { xtemp 5 ytemp 6 } verbose 1 ###<TODO><20140711><DZLIU>### SEEMS USELESS HERE, BECAUSE SimuX WILL CALL get_CoordX. 
    set x$imax = xtemp
    set y$imax = ytemp
    if(dimen(x$imax)<=0) { error! exit! } 
    
    #<20170801># #noise24
    #<20170801># define prev_imax $imax define prev_imax_name $imax_name define prev_imax_name_rms $imax_name_rms ###<TODO><Added><DZLIU>###
    #<20170801># define imax 24 define imax_name_rms "n_mips_1_s1_v0_37_rms_ED" define imax_name $imax_name_rms   ###<TODO><Modified><DZLIU>###
    #<20170801># 
    #<20170801># ###<Added><DZLIU>### sky2xy
    #<20170801># !\rm aaa_goSS_sky2xy_input_24 >> /dev/null 2>&1
    #<20170801># !\rm aaa_goSS_sky2xy_output_24 >> /dev/null 2>&1
    #<20170801># if($?print_noheader==1) {define prev_noheader $print_noheader} else {define prev_noheader 0} define print_noheader 1 
    #<20170801># print  aaa_goSS_sky2xy_input_24 '%17.7f %17.7f\n' {Xra Xde}
    #<20170801># if($?prev_noheader==1) {define print_noheader $prev_noheader}
    #<20170801># !sky2xy -j $imax_name_rms.fits @aaa_goSS_sky2xy_input_24 > aaa_goSS_sky2xy_output_24
    #<20170801># data aaa_goSS_sky2xy_output_24 read {x24 5 y24 6} ###<TODO><DZLIU### USELESS ???
    #<20170801># if(dimen(x24)<=0) {error! exit!}
    #<20170801># ###<Added><DZLIU>###
    #<20170801># 
    #<20170801># echo Doing xdo_sizes for $imax_name                        ###<Modified><DZLIU>###
    #<20170801># macro read goFine.sm xdo_sizes                             ###<Modified><DZLIU>###
    #<20170801># echo Done  xdo_sizes NAXIS1=$imax_xsize NAXIS2=$imax_ysize ###<Modified><DZLIU>###
    #<20170801># echo Doing noise_XXX for $imax_name                        ###<Modified><DZLIU>###
    #<20170801># macro read goFine.sm noise_XXX                             ###<Modified><DZLIU>###
    #<20170801># echo Done  noise_XXX NAXIS1=$imax_xsize NAXIS2=$imax_ysize ###<Modified><DZLIU>###
    #<20170801># #set noi24 = noi24**(-2)                   ###<NOTE><DZLIU><AlreadyCommented>###
    #<20170801># #set goodArea = noi24>6000   # expos map   ###<NOTE><DZLIU><AlreadyCommented>###
    #<20170801># set goodArea = noi24<0.005   # measured on the new images v0.37  --> 148.16 arcmin^2 ###<NOTE><DZLIU>### IMPORTANT!!!
    #<20170801># define imax $prev_imax define imax_name $prev_imax_name define imax_name_rms $prev_imax_name_rms ###<TODO><Added><DZLIU>###
    #<20170801># #set goodArea = noi$imax<0.05  # <TODO><DZLIU> ###<Modified><DZLIU>###
    #<20170801># #set goodArea = noi$imax<1.00  # <TODO><DZLIU> ###<Modified><DZLIU>### for 1160 map
    #<20170801># 
    #<20170801># foreach sss {Xra Xde} {set $sss"_" = $sss if(goodArea)} ###<NOTE><DZLIU><20140513>### ONLY simulate objects within goodArea
    #<20170801># echo There are $(sum(goodArea)) simulated objects within goodArea with noise24<0.005 ###<Added><DZLIU><20140513>### 
    
    set goodArea = Xra*0 + 1
    
    ###<Commented><DzLIU><20140924>### statistics on closest distance
    ###<Added><DzLIU><20140820>### prevent too close objects
    ### set goodNeib = Xra*0.0
    ### do i=0,dimen(Xra)-1 {
    ###     set tempNeibDistances = (((raF-Xra[$i])*COS(Xde[$i]/180.0*pi)*3600.0)**2+((deF-Xde[$i])*3600.0)**2)
    ###     vecminmax tempNeibDistances tempNeibMinDis tempNeibMaxDis
    ###     set goodNeib[$i] = sqrt($tempNeibMinDis)
    ###     # echo $(raF[0]) $(Xra[$i]) $(COS(Xde[$i]/180.0*pi)) $(deF[0]) $(Xde[$i]) $(goodNeib[$i])
    ###     # !sleep 5.0
    ### }
    ### foreach sss {Xra Xde} {set $sss"_" = $sss if(goodNeib>3.0 && goodArea)} ###<NOTE><DZLIU><20140820>### ONLY simulate objects not too close to neighbors
    ### echo There are $(sum(goodNeib>3.0 && goodArea)) simulated objects within goodArea with >3.0 arcsec distance to neighbors ###<Added><DZLIU><20140820-20140821>### 
    ###<Added><DzLIU><20140820>###
    ###<Commented><DzLIU><20140924>### statistics on closest distance
    
    ###<Added><DzLIU><20140930>### prevent too close to local objects
    #<DEL><20150604><dzliu># macro read run_image_util.sm
    #<ADD><20150604><dzliu># load run_image_util.sm
    load run_image_util.sm
    checkTooCloseToLargeLocalGalaxies Xra Xde goodNeib
    foreach sss {Xra Xde} {set $sss"_" = $sss if(goodNeib && goodArea)} ###<NOTE><DZLIU><20140820>### ONLY simulate objects not too close to neighbors
    echo There are $(sum(goodNeib && goodArea)) simulated objects within goodArea and not too close to local large galaxies ###<Added><DZLIU><20140930>### 
    ###<Added><DzLIU><20140930>###
    
    ctype blue points Xra Xde ctype 0
    ctype red points Xra_ Xde_ ctype 0
    print "aaa_Xra_Xde_.txt" {Xra_ Xde_}
    set x_si = Xra_
    set y_si = Xde_
    set fix1_si = x_si*0.0 # fix the position (fix=0) in default
    set fix2_si = y_si*0.0 # fix the position (fix=0) in default
    
    ###<Modif><DzLIU><20170510>### fixed vary bug
    ###<Modif><DzLIU><20160914>### fixed vary problem
    ###<Added><DzLIU><20141123>###
    set Xid_ = 0,dimen(Xra_)-1
    set Xid_ = Xid_ + float($xdate)*1e6
    if(is_file("xpriorGN_RAD_"$imax"_"$xdate".txt")) {
        goBackupFile "xpriorGN_RAD_"$imax"_"$xdate".txt"
    }
    print "xpriorGN_RAD_"$imax"_"$xdate".txt" '%18.0f %15.7f %15.7f\n' {Xid_ Xra_ Xde_}
    ###<Added><DzLIU><20141123>###
    ###<Modif><DzLIU><20160914>### fixed vary problem
    ###<Modif><DzLIU><20170510>### fixed vary bug


SimuX 00    
            # Here we do galaxy simulation
            # We inject one simulated source each time and fit with galfit then recover its flux and uncertainty. 
            # W repeat this for several thousand times defined by Nsimu. 
            
            # check the variable: doParallel doPostParallel
            # if doParallel is defined and == 0, then undefine it.
            # if doPostParallel is defined and == 0, then undefine it. <20150608><dzliu>
            if($?doParallel==1){if($doParallel==0){undef doParallel}}
            if($?doPostParallel==1){if($doPostParallel==0){undef doPostParallel}}
            
            # check vary position
            if(!$?vary_positions) {define vary_positions 0}
            if(!$vary_positions) {
                define Nsimu $(dimen(x_si)) ###<Modified><DZLIU>### after goSS, Nsimu is reduced!
                set mag_si = $mag0+($mag1-$mag0)*random($Nsimu)
                set mag_pr = mag_si * 0.0 + $mag_start
                get_coordX
                macro read goPriorDL.sm
                gPriors
            } else {
                # must have already run goSS => xm_si, fix1_si, fix2_si
                set mag_si = mag_si
                set mag_pr = xm_si
                macro read goPriorDL.sm
                gPriors
            }

            if(is_vector(xm)) {
                set m$imax = xm
            } else {
                set m$imax = raF*0.0 + $mag_start
            }

            # set fix1 fix2 for x and y if vary_positions
            if($vary_positions) {
                set fix1 = raF*0.0 + 1
                set fix2 = deF*0.0 + 1
            } else {
                set fix1 = raF*0.0 + 0
                set fix2 = deF*0.0 + 0
            }
            
            macro read goFineDL.sm xdo_sizes
            
            # <20160914> note that after goSS or gPriors, xdate already contains vary if defined vary_positions
            define outfile "xsimuGN_OUT_"$imax"_"$xdate".txt"                         ###<20160914><DZLIU### moved to here
            define sumfile "xpriorGN_MAG_"$imax"_"$xdate".txt"                        ###<Added><DZLIU>### doFakeDetection
            
            # <20160914> backup
            if(is_file($outfile)) {
                goBackupFile $outfile
            }
            
            if($?doPostParallel==0) {                                                     ###<Added><DZLIU>### doPostParallel -doFakeDetection
                verbose 0                                                                 ###<Added><DZLIU>### doPostParallel
                if(is_file($sumfile)) {                                                   ###<Added><DZLIU>### doPostParallel
                    goBackupFile $sumfile                                                 ###<Added><DZLIU>### doPostParallel
                }                                                                         ###<Added><DZLIU>### doPostParallel
                if(!is_vector(Xid_)) {                                                    ###<Added><DZLIU>### doPostParallel
                    print $sumfile '%17.7f %17.7f %15.3f %15.3f %16.7g %20.0f\n' {x_si y_si x_si_ y_si_ mag_si Xid_}
                } else {                                                                  
                    print $sumfile '%17.7f %17.7f %15.3f %15.3f %16.7g\n' {x_si y_si x_si_ y_si_ mag_si}
                }                                                                         ###<Added><DZLIU>### doPostParallel
                verbose 1                                                                 ###<Added><DZLIU>### doPostParallel
            } else {                                                                      ###<Added><DZLIU>### doPostParallel
                echo                                                                      ###<Added><DZLIU>### doPostParallel
                echo Reading $sumfile!                                                    ###<Added><DZLIU>### doPostParallel
                echo                                                                      ###<Added><DZLIU>### doPostParallel
                data $sumfile read {x_si 1 y_si 2 x_si_ 3 y_si_ 4 mag_si 5}               ###<Added><DZLIU>### doPostParallel
            }                                                                             ###<Added><DZLIU>### doPostParallel
            
            set ii_s = 0,dimen(x_si)-1
            
            foreach sar ii_s {
                # create simulated image with added object
                if(is_vector(Xid_)){
                    set Xid_f = Xid_[$sar] set Xid_s = sprintf('%.0f',Xid_f) define idSi "$(Xid_s)"
                } else {define idSi $sar}
                
                define raSi $(x_si[$sar]) define deSi $(y_si[$sar])
                define xSi $(x_si_[$sar]) define ySi $(y_si_[$sar])
                define mSi $(mag_si[$sar]) define mPr $(mag_pr[$sar])
                
                
                set Aa = float($xSi) set Bb = float($ySi) set Cc=float($mSi) set Dd=float($mPr)
                set fixAa = float(fix1_si[$sar]) set fixBb = float(fix2_si[$sar])
                set Lx1 = int(Aa)-$f_buff-$g_buff set Lx1 = Lx1>=1 ? Lx1 : 1 set Lx1 = Lx1<=$imax_xsize ? Lx1 : $imax_xsize
                set Lx2 = int(Aa)+$f_buff+$g_buff set Lx2 = Lx2>=1 ? Lx2 : 1 set Lx2 = Lx2<=$imax_xsize ? Lx2 : $imax_xsize
                set Ly1 = int(Bb)-$f_buff-$g_buff set Ly1 = Ly1>=1 ? Ly1 : 1 set Ly1 = Ly1<=$imax_ysize ? Ly1 : $imax_ysize
                set Ly2 = int(Bb)+$f_buff+$g_buff set Ly2 = Ly2>=1 ? Ly2 : 1 set Ly2 = Ly2<=$imax_ysize ? Ly2 : $imax_ysize
                
                if($?doPostParallel==0) {
                    # Make a model image using galfit
                    define  aa_file "HSO_$imax"".INPUT"
                    print  $aa_file 'A) $imax_name".fits" \n' {}
                    print +$aa_file 'B) simu.fits \n' {}
                    print +$aa_file 'C) $imax_name_rms".fits" \n' {}
                    print +$aa_file 'D) $imax_name_psf".fits" \n' {}
                    print +$aa_file 'E) $psf_resampl \n' {}
                    print +$aa_file 'F) none \n' {}
                    print +$aa_file 'G) none \n' {}
                    print +$aa_file 'I) 1 1 \n' {}
                    print +$aa_file 'J) 0 \n K) 0.06   0.06 \n O) regular \n P) 1 \n \n' {}
                    print +$aa_file 'H) $(Lx1[0]) $(Lx2[0]) $(Ly1[0]) $(Ly2[0]) \n' {}    ###<Modified><DZLIU>###<IMPORTANT>### [$0]=>[0]
                    define print_noheader 1
                    print +$aa_file '\n 0) psf \n 1) %.3f %.3f 0 0 \n 3) %.3f  0 \n Z) 0  \n \n' {Aa Bb Cc}
                    !galfit $aa_file > "HSO_"$imax".STDOUT"
                    
                    # Add the model image to original image using IRAF
                    #<20170507># print  do.cl 'images\n' {}
                    #<20170507># print +do.cl 'imutil\n' {}
                    #<20170507># print +do.cl 'imdel simu2.fits\n' {}
                    #<20170507># print +do.cl 'imdel simu3.fits\n' {}
                    #<20170507># print +do.cl 'imdel simu_rms.fits \n' {}
                    #<20170507># print +do.cl 'imcopy $imax_name""[$(Lx1[0]):$(Lx2[0]),$(Ly1[0]):$(Ly2[0])] simu3 \n' {}
                    #<20170507># print +do.cl 'imarith simu + simu3 simu2.fits\n' {}
                    #<20170507># print +do.cl 'imcopy $imax_name_rms""[$(Lx1[0]):$(Lx2[0]),$(Ly1[0]):$(Ly2[0])] simu_rms \n' {}
                    #<20170507># print +do.cl 'logout\n\n' {}
                    #<20170507># !cl < do.cl >> /dev/null 2>&1
                    
                    # Add the model image to original image using dzliu CrabFitsImage toolkit
                    !rm simu2.fits simu3.fits simu_rms.fits 2>/dev/null
                    !echo CrabFitsImageCrop $imax_name.fits -rect $(Lx1[0]-1) $(Ly1[0]-1) $(Lx2[0]-1) $(Ly2[0]-1) -out simu3.fits > simu3.log
                    !CrabFitsImageCrop $imax_name.fits -rect $(Lx1[0]-1) $(Ly1[0]-1) $(Lx2[0]-1) $(Ly2[0]-1) -out simu3.fits >> simu3.log
                    !echo CrabFitsImageArithmetic simu.fits + simu3.fits simu2.fits > simu2.log
                    !CrabFitsImageArithmetic simu.fits + simu3.fits simu2.fits >> simu2.log
                    !echo CrabFitsImageCrop $imax_name_rms.fits -rect $(Lx1[0]-1) $(Ly1[0]-1) $(Lx2[0]-1) $(Ly2[0]-1) -out simu_rms.fits > simu_rms.log
                    !CrabFitsImageCrop $imax_name_rms.fits -rect $(Lx1[0]-1) $(Ly1[0]-1) $(Lx2[0]-1) $(Ly2[0]-1) -out simu_rms.fits >> simu_rms.log
                    !cp simu3.fits simu1.fits
                    !touch simu.is.model.image
                    !touch simu1.is.original.image
                    !touch simu2.is.coadded.image
                    
                    # Save the original image block, model image block and combined image block
                    ###!\cp simu3.fits fit$idSi.ori.fits
                    ###!\cp simu.fits  fit$idSi.mod.fits
                    ###!\cp simu2.fits fit$idSi.com.fits
                    ###!\cp simu_rms.fits fit$idSi.rms.fits
                }
                
                
                # Now we recover the simulated object flux and uncertainty
                Simu_
                
                
            }



Simu_ 00    
            # In this function we run galfit to model the simulated object, 
            # then coadd original image with the simulated source model image, 
            # then run galfit to recover all prior sources plus the simulated source, 
            # then copy final results "fit.log" from each box subdirectory to main directory for further analysis

            set Sx$imax = x$imax concat Aa           # Here join the prior list with the fake object in exam
            set Sy$imax = y$imax concat Bb
            
            set fixSx$imax = fix1 concat fixAa
            set fixSy$imax = fix2 concat fixBb
            
            set Snoi$imax = (x$imax*0.0) concat 0.0
            
            noise_AaB       # determine NNN, the noise at the fake object position
            
            set Sm$imax = (m$imax) concat Dd
            
            # select objects within current box
            set coo = abs(Sy$imax-Bb[0])<$g_buff && abs(Sx$imax-Aa[0])<$g_buff
            set xx$imax = Sx$imax-$(Lx1[0])+1 if(coo)
            set yy$imax = Sy$imax-$(Ly1[0])+1 if(coo)
            set mm$imax = Sm$imax             if(coo)
            set fixxx$imax = fixSx$imax       if(coo)
            set fixyy$imax = fixSy$imax       if(coo)
            
            # prepare galfit input file
            if($?doPostParallel==0) {
                define aa_file "HSO_$imax"".INPUT"
                
                print  $aa_file 'A) simu2.fits \n' {}
                print +$aa_file 'B) simu3.fits \n' {}
                print +$aa_file 'C) simu_rms.fits \n' {}
                print +$aa_file 'D) $imax_name_psf".fits" \n' {}
                print +$aa_file 'E) $psf_resampl \n' {}
                print +$aa_file 'F) none \n' {}
                print +$aa_file 'G) HSO_$imax".CONSTRAINTS" \n' {}
                print +$aa_file 'I) 1 1 \n' {}
                print +$aa_file 'J) 0 \n K) 0.06   0.06 \n O) regular \n P) 0 \n \n' {}
                print +$aa_file 'H) 1 $(Lx2[0]-Lx1[0]+1) 1 $(Ly2[0]-Ly1[0]+1) \n' {}
                
                set aa1 = xx$imax set aa2 = yy$imax set aa3 = mm$imax 
                set fixaa1 = fixxx$imax set fixaa2 = fixyy$imax
                
                define print_noheader 1 ###<Modified><DZLIU>### define print_noheader 1
                
                print +$aa_file '\n 0) psf \n 1) %.3f %.3f %.0f %.0f \n 3) %.3f  1 \n Z) 0  \n \n' {aa1 aa2 fixaa1 fixaa2 aa3}
                print +$aa_file '\n 0) sky \n 1) $Xback  0 \n 2) 0 0 \n 3) 0 0 \n Z) 0  \n \n' {}
                
                set oo=1,dimen(xx$imax)
                print HSO_$imax".CONSTRAINTS" '   %d   mag -10 to $mag_toofaint  \n' {oo}
                if($vary_positions) {
                    define max_vary 1
                    if('$imax'=='16') {define max_vary 1}
                    if('$imax'=='24') {define max_vary 1}
                    if('$imax'=='100') {define max_vary 1}
                    if('$imax'=='160') {define max_vary 1}
                    if('$imax'== '20cm') {define max_vary 2}
                    print +HSO_$imax".CONSTRAINTS" '   %d   x -$max_vary $max_vary  \n' {oo}
                    print +HSO_$imax".CONSTRAINTS" '   %d   y -$max_vary $max_vary  \n' {oo}
                } else {
                    define max_vary 0
                }
            }
                
            #!/dsm/upgal/data/edaddi/galfit/galfit HSO_$imax".INPUT"
            if($?doParallel==0 && $?doPostParallel==0) {                              ###<Added><DZLIU>### doParallel
                #!galfit -imax 500 $aa_file > "HSO_$imax"".STDOUT"                    ###<Added><DZLIU>### doParallel
                !galfit $aa_file > "HSO_"$imax".STDOUT"                               ###<Added><DZLIU>### doParallel
            } else {                                                                  ###<Added><DZLIU>### doParallel
                if($vary_positions) {
                    define idBox "boxgalsim_vary/box"$idSi
                    define idRun "boxgalsim_vary/runbox"$idSi".sh"
                    define idTar "../doing"$imax".box.galsim_vary"
                } else {
                    define idBox "boxgalsim/box"$idSi
                    define idRun "boxgalsim/runbox"$idSi".sh"
                    define idTar "../doing"$imax".box.galsim"
                }
                if($?doParallel==1) {                                                 ###<Added><DZLIU>### doParallel
                    !rm -rf                       $idBox                              ###<Added><DZLIU>### doParallel
                    !mkdir -p                     $idBox                              ###<Added><DZLIU>### doParallel
                    !cp HSO_$imax.INPUT           $idBox/                             ###<Added><DZLIU>### doParallel
                    !cp HSO_$imax.CONSTRAINTS     $idBox/                             ###<Added><DZLIU>### doParallel
                    !cp simu3.*                   $idBox/                             ###<Added><DZLIU>### doParallel
                    !cp simu2.*                   $idBox/                             ###<Added><DZLIU>### doParallel
                    !cp simu1.*                   $idBox/                             ###<Added><DZLIU>### doParallel
                    !cp simu.*                    $idBox/                             ###<Added><DZLIU>### doParallel
                    !cp simu_rms.*                $idBox/                             ###<Added><DZLIU>### doParallel
                    !ln -s ../$imax_name.fits     $idBox/$imax_name.fits              ###<Added><DZLIU>### doParallel
                    !ln -s ../$imax_name_rms.fits $idBox/$imax_name_rms.fits          ###<Added><DZLIU>### doParallel
                    !ln -s ../$imax_name_psf.fits $idBox/$imax_name_psf.fits          ###<Added><DZLIU>### doParallel
                    !rm "fit.log" 2>/dev/null                                         ###<Added><DZLIU>### doParallel
                    echo doParallel: preparing $idBox                                 ###<Added><DZLIU>### doParallel
                    print  runqsub '\#!/bin/bash\n' {}                                ###<Added><DZLIU>### doParallel
                    print +runqsub 'set -e\n' {}                                      ###<Added><DZLIU>### doParallel
                    print +runqsub 'cd $idBox\n' {}                                   ###<Added><DZLIU>### doParallel
                    print +runqsub 'if [[ -f fit.log ]]; then rm fit.log; fi\n' {}    ###<Added><DZLIU>### doParallel
                    print +runqsub 'if [[ -f galfit.01 ]]; then rm galfit.*; fi\n' {} ###<Added><DZLIU>### doParallel
                    print +runqsub 'galfit HSO_$imax.INPUT > HSO_$imax.STDOUT\n' {}   ###<Added><DZLIU>### doParallel
                    print +runqsub 'chmod 777 *\n' {}                                 ###<Added><DZLIU>### doParallel
                    print +runqsub '\n' {}                                            ###<Added><DZLIU>### doParallel
                    !mv runqsub $idRun                                                ###<Added><DZLIU>### doParallel
                    if($sar==0 && 1==1) {                                             ###<Added><DZLIU>### doParallel
                    !cp $imax_name.fits     $idBox/../$imax_name.fits                 ###<Added><DZLIU>### doParallel
                    !cp $imax_name_rms.fits $idBox/../$imax_name_rms.fits             ###<Added><DZLIU>### doParallel
                    !cp $imax_name_psf.fits $idBox/../$imax_name_psf.fits             ###<Added><DZLIU>### doParallel
                    }                                                                 ###<Added><DZLIU>### doParallel
                    return                                                            ###<Added><DZLIU>### doParallel
                }                                                                     ###<Added><DZLIU>### doParallel
                if($?doPostParallel==1) {                                             ###<Added><DZLIU>### doPostParallel
                    !rm                        fit.log        2>/dev/null             ###<Added><DZLIU>### doPostParallel
                    !rm                        simu3.fits     2>/dev/null             ###<Added><DZLIU>### doPostParallel
                    !rm                        simu_rms.fits  2>/dev/null             ###<Added><DZLIU>### doPostParallel
                    !cp  $idBox/fit.log        fit.log        2>/dev/null             ###<Added><DZLIU>### doPostParallel
                    !cp  $idBox/simu3.fits     simu3.fits     2>/dev/null             ###<Added><DZLIU>### doPostParallel
                    !cp  $idBox/simu_rms.fits  simu_rms.fits  2>/dev/null             ###<Added><DZLIU>### doPostParallel
                }                                                                     ###<Added><DZLIU>### doPostParallel
            }
            
            echo $idSi ($xSi,$ySi) [$(Lx1[0]):$(Lx2[0]),$(Ly1[0]):$(Ly2[0])] ($($sar+1)~/~$(dimen(x_si))) {$(sum(coo))} (RA=$raSi Dec=$deSi X=$(Aa) Y=$(Bb) Xm=$(Cc))
            
            goRead
            
            #define aaa ?    # uncomment this to check result of Simu



goRead  00    
            !\rm aaa1 >> /dev/null 2>&1 ###<Modified><DZLIU>### stdout to null
            !\rm aaa2 >> /dev/null 2>&1 ###<Modified><DZLIU>### stdout to null
            !\rm aaa3 >> /dev/null 2>&1 ###<Modified><DZLIU>### stdout to null
            
            if(is_file("fit.log")) {
                
                # Read fit.log
                #!grep -A1 "psf" "fit.log" | perl -p -e 's/[^0-9. +-]//g' | perl -p -e 's/--/\\n/g' > "fit.txt"
                #!galfit_fit_log_to_fit_txt
                #if($?verbose==1) {define goRead_verbose $verbose} else {define goRead_verbose 1} verbose 0
                #data "fit.txt" read {xg 1.f yg 2.f _mag 3.f xg_err 4.f yg_err 5.f _err 6.f}
                #if($?goRead_verbose==1) {verbose $goRead_verbose}
                if($?verbose==1) {define goRead_verbose $verbose} else {define goRead_verbose 1} verbose 0
                load astroGalfit.sm
                readGalfitResult simu3.fits
                if($?goRead_verbose==1) {verbose $goRead_verbose}
                
                # Initialize variables
                foreach varvar {mm ee ResABS CloseDis CrowdVar ResPixObsABS} {set $varvar = -99}
                
                # Select the simulated object
                set mm = ResultMags[dimen(ResultMags)-1] # _mag[dimen(_mag)-1] # the simulated object is the last fitted source
                set ee = ResultMagsErr[dimen(ResultMagsErr)-1] # _err[dimen(_err)-1] # the simulated object is the last fitted source

                # Load photometry constants
                #load astroPhot.sm
                macro read astrodepth_photometry_constants.sm
                set_$field""_photometry_constants_$imax
                
                # Compute residual image flux
                load fresidual.sm
                set ResABS = fresidual_inPixel("simu3.fits[3]",$($f_buff+$g_buff+1),$($f_buff+$g_buff+1),$($rBeam_$imax/$PixScale_$imax/2.0))
                !\cp aaa_fresidual_aperphot_* $idBox/
                set ResPixObsABS = ResABS
                
                # Compute crowdedness/crowdiness
                load crowdiness.sm 
                #set Sx$imax = x$imax concat Aa # Here join the prior list with the fake object in exam
                #set Sy$imax = y$imax concat Bb
                set PSFSizePix = $rBeam_$imax/$PixScale_$imax
                set CrowdnessVar = calcOneCrowdiness_inPixel(Sx$imax,Sy$imax,Aa,Bb,PSFSizePix,1.5)
                set CrowdVar = CrowdnessVar
                set CloseDis = CrowdnessVar
                echo ResABS=$(ResABS) ResPixObsABS=$(ResPixObsABS) CloseDis=$(CloseDis) CrowdVar=$(CrowdVar)
                
            } else {
                
                echo ""
                echo "Warning! \"fit.log\" was not found for box "$idSi"! Could probably because the simulated source is too close to the edge of the whole image thus the fitting was failed because some prior sources are cut outside of the box image."
                echo ""
                foreach varvar {mm ee ResABS CloseDis CrowdVar ResPixObsABS} {set $varvar = -99}
                
            }
            
            # Output to outfile
            define pref_noheader $print_noheader
            define print_noheader 1
            echo 
            echo Writing to $outfile ($idSi)
            echo 
            verbose 0
            set idLong = $idSi
            print +$outfile '%16.3f %16.3f %16.7g %16.7g %16.7g %16.7g %16.7g %16.7g %16.7g %16.7g %20.0f\n' \
                            {Aa Bb Cc mm ee NNN ResABS CloseDis CrowdVar ResPixObsABS idLong} ###<Modified><DZLIU>### OUTPUT FINAL DATA TABLE !!!
            define print_noheader $pref_noheader
            verbose 1







get_xy_fromRD
            define pref_noheader $print_noheader         ### <Modified><20140401><DZLIU>
            define print_noheader 1
            print do.csh 'xy2sky $imax_name".fits" ' {}
            print +do.csh ' %.7f %.7f' {x_si y_si}       # these are x-y   
            print +do.csh '\n' {}
            define print_noheader $pref_noheader        ### <Modified><20140401><DZLIU>
            !\rm aaa >> /dev/null 2>&1 ###<Modified><DZLIU>### stdout to null
            !csh < do.csh > aaa
        
            data aaa read '%d:%d:%f %d:%d:%f' {ra1 ra2 ra3 de1 de2 de3}
            set de1=-de1
            set raF = (ra3/3600+ra2/60+ra1)*15
            set deF = de3/3600+de2/60+de1
            set deF=-deF
            # all this is for the simulated maps where I know only positions


get_coordX
            !\rm aaa_get_coordX_sky2xy_* >> /dev/null 2>&1 ###<Modified><DZLIU>### stdout to null
            
            if($?print_noheader) {define pref_noheader $print_noheader} else {define pref_noheader 0} ### <Modified><20140401><20141123><DZLIU>
            define print_noheader 1                                           ### <Modified><20140321><DZLIU>
            print  aaa_get_coordX_sky2xy_input '%17.7f %17.7f\n' {x_si y_si}  ### <Added><20140321><DZLIU> sky2xy input file
            define print_noheader $pref_noheader                              ### <Modified><20140401><DZLIU>
            
            echo Doing sky2xy for $(dimen(x_si)) objects in get_coordX ...
            !sky2xy  -j  $imax_name.fits  @aaa_get_coordX_sky2xy_input > aaa_get_coordX_sky2xy_output
            echo Done  sky2xy
            
            #print  do.csh 'sky2xy $imax_name.fits %.7f %.7f J2000\n' {x_si y_si} # these are RA-DEC
            #!csh < do.csh > aaa
            #data aaa read {x_si_ 5 y_si_ 6} # these are x-y !!!!
            
            data aaa_get_coordX_sky2xy_output read {x_si_ 5 y_si_ 6} ### <Modified><20140321><DZLIU> sky2xy output file
            
            # all this is for the simulated positions
            
            ###<Commented><DZLIU>### NOW WE DIRECTLY USE sky2xy @InputList RATHER THAN OLD METHOD
            # define print_noheader 1
            # print do.csh 'sky2xy $imax_name".fits"' {}
            # print +do.csh ' %.7f %.7f J2000 ' {x_si y_si}       # these are RA-DEC
            # print +do.csh '\n' {}
            # !\rm aaa
            # !csh < do.csh > aaa
            # 
            # data aaa read {x_si_ 5 y_si_ 6}       # these are x-y    !!!!
            # # all this is for the simulated positions


goBackupFile 01
            if(!$?1) {return}
            define ToNewOutFile Replace
            # define ToNewOutFile ? <"xpriorGN_RAD_"$imax"_"$xdate".txt" exists! Do you really want to replace it? [Replace/No]>
            if(index('$ToNewOutFile','r')==0 || index('$ToNewOutFile','R')==0) {
                set BkOldOutFile =              substr('$date',index('$date',':')+7,4)
                set BkOldOutFile = BkOldOutFile+substr('$date',index('$date',' ')*0,index('$date',' '))
                set BkOldOutFile = BkOldOutFile+substr('$date',index('$date',' ')+1,index('$date',':')-index('$date',' ')-4)+'.' #<buggy><fixed><20170507><dzliu># 
                set BkOldOutFile = BkOldOutFile+substr('$date',index('$date',':')-2,2)+'H'
                set BkOldOutFile = BkOldOutFile+substr('$date',index('$date',':')+1,2)+'M'
                set BkOldOutFile = BkOldOutFile+substr('$date',index('$date',':')+4,2)+'S'
                while { index(BkOldOutFile,' ')>=0 } {
                    set BkOldOutFile_nbsp = index(BkOldOutFile,' ')
                    set BkOldOutFile_slen = strlen(BkOldOutFile)
                    set BkOldOutFile_str1 = substr(BkOldOutFile,0,BkOldOutFile_nbsp)
                    set BkOldOutFile_str2 = substr(BkOldOutFile,BkOldOutFile_nbsp+1,BkOldOutFile_slen-BkOldOutFile_nbsp-1)
                    set BkOldOutFile = BkOldOutFile_str1+'0'+BkOldOutFile_str2
                }
                #echo $(BkOldOutFile)
                !mv $1 $1.backup.$(BkOldOutFile)
                echo 
                echo Backuping $1 as $1.backup.$(BkOldOutFile)
                echo 
                echo Creating new $1
                echo 
            } else {
                echo TODO
                echo TODO
                echo TODO
                echo TODO
                echo TODO
                echo TODO
                define aaa ?
            }










noise_AaB    !\rm aaa_noise >> /dev/null 2>&1 ###<Modified><DZLIU>### stdout to null
            #echo Doing noise_AaB
            set x1=Aa-1 set x2=Aa+1
            set y1=Bb-1 set y2=Bb+1
            #<20170507># print  do.cl 'images\n imutil\n' {}
            #<20170507># print +do.cl 'imstat $imax_name_rms[%.0f:%.0f,%.0f:%.0f] >> aaa_noise \n' {x1 x2 y1 y2}
            #<20170507># print +do.cl 'logout\n' {}
            #<20170507># !cl < do.cl >> /dev/null 2>&1 ###<Modified><DZLIU>### stdout to null
            #<20170507># verbose 0
            #<20170507># data aaa_noise read NNN 4
            #<20170507># verbose 1
            !echo getpix $imax_name_rms.fits $(x1)-$(x2) $(y1)-$(y2) > aaa_noise.getpix.input
            !getpix -n 1 $imax_name_rms.fits '%.10g' $(x1)-$(x2) $(y1)-$(y2) | sed -e 's/nan/1e30/g' > aaa_noise.getpix.output
            if(is_vector(aaa_noise_tmp_var)) {unset aaa_noise_tmp_var}
            verbose 0 data aaa_noise.getpix.output read {aaa_noise_tmp_var 1.f} verbose 1
            if(!is_vector(aaa_noise_tmp_var)) {print 'Error! noise_AaB failed!\n' {} exit}
            stats_med aaa_noise_tmp_var aaa_noise_tmp_med aaa_noise_tmp_siq
            set NNN = $aaa_noise_tmp_med
            set NNN = NNN >0 ? NNN : 1e30
            #echo Done  noise_AaB
            if(is_vector(NNN)==0) { 
                define ErrorOccursOn___NNN ? 
                exit
            } ###<Added><DZLIU>###






