RunGalsim 04
    # 
    #  Input:
    #      field band rebuild
    # 
    #  Example: 
    #      load AstroDepthRunGalsim_v201605.sm RunGalsim cosmos 24 2016A
    #      load AstroDepthRunGalsim_v201605.sm RunGalsim cosmos 24 2016A rebuild
    # 
    #  Supplementary Files: 
    #  
    
    ############################
    ### Input Argument Check ###
    ############################
    if($?1==0||$?2==0){
        print 'Example: load AstroDepthRunGalsim_v201605.sm RunGalsim goodss 24 2016A [rebuild]\n' {}
        return
    }
    
    
    ########################################
    ### Set Data Info and Check Software ###
    ########################################
    load AstroDepthSetDataInfo_v201605.sm SetDataInfo $1 $2 $3
    #set boxName = PsimBox
    #set boxPath = PsimDir
    
    
    ########################################
    ### Do simulation in each galfit box ###
    ########################################
    
    # first check user-provide simulation info
    if(is_file("set_"$1"_simulation_constants.sm")) {
        macro read set_$1""_simulation_constants.sm
        set_$1""_simulation_constants
    } else {
        print 'Error! Could not find \"set_$1""_simulation_constants.sm\"!\n' {}
        return
    }
    if(!is_vector(sim_mag0)) {
        print 'Error! Please set sim_mag0 in \"set_$1""_simulation_constants.sm\"!\n' {} 
        exit
        return
    }
    if(!is_vector(sim_mag1)) {
        print 'Error! Please set sim_mag0 in \"set_$1""_simulation_constants.sm\"!\n' {} 
        exit
        return
    }
    
    # cd boxgalsim
    astroGalbox_cd_DirPathVector PsimDir
    !echo 
    !echo Current directory \$(pwd -P)
    
    # check ../boxgalfit
    !test -d ../boxgalfit
    if($exit_status!=0) {
        print 'Error! \"../boxgalfit\" was not found! Perhaps we should first run AstroDepthRunGalfit!\n' {}
        exit
        return
    }
    
    # list ../boxgalfit
    !ls -1dv ../boxgalfit/box* > boxlist.txt
    data boxlist.txt read {boxdirs 1.s}
    !cat boxlist.txt | sed -e 's/.*box//g' > boxlist_id.txt
    data boxlist_id.txt read {boxids 1}
    
    # loop ../boxgalfit/box*
    set boxids = boxids[0] #<TODO>#
    do i=0,dimen(boxids)-1 {
        !test -f $(boxdirs[$i])/fit.fits
        if($exit_status==0) {
            do j=1,1 {
                set simid = boxids[$i]*1e8 + $j
                print '\n' {}
                print 'Simulating box$(boxids[$i]) -> box$(simid) \n' {}
                !mkdir box$(simid)
                chdir box$(simid)
                !cp ../$(boxdirs[$i])/sci.fits .
                !cp ../$(boxdirs[$i])/rms.fits .
                !cp ../$(boxdirs[$i])/psf.fits .
                !cp ../$(boxdirs[$i])/fit.param .
                !cp ../$(boxdirs[$i])/fit.limit .
                !cp ../$(boxdirs[$i])/fit.input .
                !cp sci.fits  sim_input.fits
                !cp fit.param sim_input.param
                !cp fit.limit sim_input.limit
                !cp fit.input sim_input.input
                verbose 0
                load rfile.sm
                rfile fit.param
                # make galfit sim_model --> output sim_coadd.fits
                set num_obj = dimen(Note)
                set fit_obj_px = PosX if(number(Note)>0)
                set fit_obj_py = PosY if(number(Note)>0)
                vecminmax fit_obj_px min_obj_px max_obj_px
                vecminmax fit_obj_py min_obj_py max_obj_py
                set idF = simid
                set pxF = (random(1)+0.20/0.60) * ($max_obj_px-$min_obj_px)*0.60 + $min_obj_px # random range 0.2-0.8
                set pyF = (random(1)+0.20/0.60) * ($max_obj_py-$min_obj_py)*0.60 + $min_obj_py # random range 0.2-0.8
                set pmF =  random(1) * (sim_mag1-sim_mag0) + sim_mag0
                set pxG = 0
                set pyG = 0
                set pmG = 0
                set nBoxLi1 = 0.0
                set nBoxLj1 = 0.0
                verbose 0
                astroGalbox_make_galfit sim_model
                verbose 0
                # make galfit fit
                set sim_posx = pxF
                set sim_posy = pyF
                set sim_mags = pmF
                initGalfitParam pxF pyF
                set IObj = num_obj+1
                set Note = sprintf('%0.0f',float(simid))
                echo ""
                writeGalfitParam sim_recover.param
                writeGalfitLimit sim_recover.limit
                !head -n -1 sim_input.param   >  fit.param
                !head -n -1 sim_input.limit   >  fit.limit
                !tail -n +3 sim_recover.param >> fit.param
                !tail -n +3 sim_recover.limit >> fit.limit
                readGalfitParam fit.param
                #set ParamFitSkyValue = 1
                if($?SkyDoFit_$(boxBand)) {
                    set ParamFitSkyValue = $SkyDoFit_$(boxBand) #<added><20160530><dzliu># skyvalue
                }
                writeGalfitInput fit.input sim_coadd.fits
                verbose 1
                # run galfit <TODO>
                !galfit fit.input > fit.out
                # cd back
                chdir ".."
            }
            
        } else {
            print '\n' {}
            print 'Warning! \"$(boxdirs[$i])\" dose not contain \"fit.fits\"!\n' {}
            !pwd
            !ls $(boxdirs[$i])
            print '\n' {}
        }
    }
    
    # 
    # END
    # 


















galsim_rebuild 01
    # 
    # usage:
    #    galsim_rebuild 24
    # 
    # vectors:
    #    sim_id sim_x sim_y sim_mag
    #    PsimOut
    # 
    if($?1==0) {print 'usage: galsim_rebuild 24\n' {} galsim_error}
    # 
    # preload
    # rfile $(PsimOut)
    # 
    # define
    get_image_size $SciPhoto_$1.fits # --> nAxis1 nAxis2
    set nBoxStep1 = $xStep_$1
    set nBoxStep2 = $yStep_$1
    set nBoxBuff1 = $fBuff_$1 + $gBuff_$1
    set nBoxBuff2 = $fBuff_$1 + $gBuff_$1
    set nBoxSize1 = float(nAxis1)/float(nBoxStep1)
    set nBoxSize2 = float(nAxis2)/float(nBoxStep2)
    set boxBuff = $gBuff_$1 + $fBuff_$1
    # 
    # begin
    !echo 
    !echo Begin time \$(date +'"%Y-%m-%d:%H:%M:%S"')
    !echo 
    # 
    # backup
    galsim_backup
    # 
    # read boxes
    do i=0,dimen(sim_id)-1 {
        # 
        # <fixed><20150708><dzliu> must input rect for galsim astroGalbox_read_box
        set rect_i1 = int( sim_x[$i]-1.0 - ($xStep_$1+1.0)/2.0 )
        set rect_i2 = int( sim_x[$i]-1.0 + ($xStep_$1+1.0)/2.0 )
        set rect_j1 = int( sim_y[$i]-1.0 - ($yStep_$1+1.0)/2.0 )
        set rect_j2 = int( sim_y[$i]-1.0 + ($yStep_$1+1.0)/2.0 )
        # 
        # now read galfit result if fit.log exists
        if(is_file("box"$(sim_id[$i])"/fit.fits") && is_file("box"$(sim_id[$i])"/fit.out") && \
           is_file("box"$(sim_id[$i])"/fit.log") && is_file("box"$(sim_id[$i])"/sim.fits")) {
            # 
            # now read galfit result <fixed><20150708><dzliu> must input rect for galsim
            echo astroGalbox_read_box: $(sim_id[$i]) $(rect_i1) $(rect_i2) $(rect_j1) $(rect_j2) $(boxBuff) $(boxBuff)
            astroGalbox_read_box $(sim_id[$i]) $(rect_i1) $(rect_i2) $(rect_j1) $(rect_j2) $(boxBuff) $(boxBuff)
            set fit_mag[$i] = ResultMags[dimen(ResultMags)-1]
            set fit_err[$i] = ResultMagsErr[dimen(ResultMagsErr)-1]
            set fit_rms[$i] = astroGalbox_Result_frms[dimen(astroGalbox_Result_frms)-1]
            set fit_res[$i] = astroGalbox_Result_fres[dimen(astroGalbox_Result_fres)-1]
            set fit_close[$i] = astroGalbox_Result_fcwd[dimen(astroGalbox_Result_fcwd)-1]
            set fit_crowd[$i] = astroGalbox_Result_fcwd[dimen(astroGalbox_Result_fcwd)-1]
            set fit_obs[$i] = astroGalbox_Result_fsci[dimen(astroGalbox_Result_fsci)-1]
            # 
            # write some results during the progressing
            if($i%(int(dimen(sim_id)/10))==0) {
              print $(PsimOut) '%15.3f %15.3f %15g %15g %15g %15g %15g %15g %15g %15g %15.0f\n' \
                     {sim_x sim_y sim_mag fit_mag fit_err fit_rms fit_res fit_close fit_crowd fit_obs sim_id}
            }
            # 
            # for debug only
            ##galsim_break
        }
    }
    # 
    # write results
    print $(PsimOut) '%15.3f %15.3f %15g %15g %15g %15g %15g %15g %15g %15g %15.0f\n' \
          {sim_x sim_y sim_mag fit_mag fit_err fit_rms fit_res fit_close fit_crowd fit_obs sim_id}
    print '\n' {}
    print 'Recovered $(dimen(sim_id)) sims object and saved into $(PsimOut).new.txt\n' {}
    # 
    # finish
    !echo 
    !echo Finish time \$(date +'"%Y-%m-%d:%H:%M:%S"')
    !echo 
    # end



galsim_map_merge 03
    # merge to map with iraf imarith
    if(1==1) {
        !echo galsim_map_merge: merging $1 '+' $2 '->' $3
        !echo $3                         > mod.iraf
        !echo "no"                      >> mod.iraf
        !echo ""                        >> mod.iraf
        !\$iraf/bin/x_images.e imdelete  < mod.iraf
        !echo $1                         > mod.iraf
        !echo "+"                       >> mod.iraf
        !echo $2                        >> mod.iraf
        !echo $3                        >> mod.iraf
        !echo ""                        >> mod.iraf
        !echo "no"                      >> mod.iraf  #verbose
        !echo "no"                      >> mod.iraf
        !echo ""                        >> mod.iraf
        !echo ""                        >> mod.iraf
        !echo ""                        >> mod.iraf
        !\$iraf/bin/x_images.e imarith   < mod.iraf
        !echo ""
        #!ds9 -mecube -lock frame image -lock scale yes -lock colorbar yes -tile mode column sci.fits mod.fits sim.fits
    }


galsim_break
    # 
    define debugbreak 1
    define debugbreak ? <Give Ctrl+C to break!>


galsim_error
    # 
    define errorbreak 1
    define errorbreak ? <Give Ctrl+C to break!>


checkGalfit
    # TODO
    define checkgalfit 1


galsim_backup 00
    if(is_file($(PsimOut))==1) {
        set PsimOut_i = 0
        set PsimOut_f = 1
        while {PsimOut_f==1 || PsimOut_i==0} {
            set PsimOut_i = PsimOut_i + 1 
            set PsimOut_s = PsimOut+{"."}+sprintf('%02d',PsimOut_i)
            DEFINE exit_status DELETE !test -f $(PsimOut_s)
            set PsimOut_f = ($exit_status == 0)
        }
        print 'writeResults: PsimOut file already exists! We will backup it as $(PsimOut_s)!\n' {} 
        !\cp $(PsimOut) $(PsimOut_s)
    }




















checkSimInfo 01
    # here we will check the user-provide "set_"$1"_simulation_constants.sm"
    if(is_file("set_"$1"_simulation_constants.sm")) {
        macro read set_"$1"_simulation_constants.sm
        set_"$1"_simulation_constants
    } else {
        print 'Error! Could not find \"set_$1""_simulation_constants.sm\"!\n' {}
        return
    }
    if(!is_vector(sim_mag0)) {
        print 'Error! Please set sim_mag0 in \"set_$1""_simulation_constants.sm\"!\n' {} 
        exit
        return
    }


generateSimPrior 03
    # 
    #  generateSimPrior which contains only RA Dec Positions but no Magnitudes
    #  
    #  macro read AstroDepthGenGalsim_v3.sm generateSimPrior goodss 99
    #  
    # 
    load astroPhot.sm
    # 
    # check
    if(!$?2) {
        print 'Usage: generateSimPrior goodss 30\n' {} 
        define errorbreak 1
        define errorbreak ? <Please give Ctrl+C!>
        return
    }
    # 
    # generate random position
    if('$1'=='goodsn'||'$1'=='GOODSN') {
        # 
        # generate random ra dec
        set x=17*random($2)               # <TODO> for GOODSN only
        set y=11*random($2)               # <TODO> for GOODSN only
        define ang 44                     # <TODO> for GOODSN only
        set X=x*cosd($ang)-y*sind($ang)
        set Y=x*sind($ang)+y*cosd($ang)
        set sim_ra = 189.17+X/60/.46-.0   # <TODO> for GOODSN only
        set sim_de = 62.08+Y/60-.0        # <TODO> for GOODSN only
    } 
    if(is_vector(sim_ra) && is_vector(sim_de)) {
        set sim_id = 1,$2
        set sim_id = float(sim_id)
        print 'generateSimPrior: generating $(dimen(sim_id)) sim objects in $1\n' {}
        # 
        # calc noise using rms or unc map
        ##if(!is_file($SciPhoto_24.fits)){!find $DirPhoto_24 -name $SciPhoto_24.fits -print0 | xargs -0 ln -s}
        ##if(!is_file($RmsPhoto_24.fits)){!find $DirPhoto_24 -name $RmsPhoto_24.fits -print0 | xargs -0 ln -s}
        convert_ad2xy $RmsPhoto_24.fits sim_ra sim_de \
                      $xBias_24 $yBias_24 24
                      # output sky2xy_x sky2xy_y
        get_image_aper_mean_rect $RmsPhoto_24.fits sky2xy_x sky2xy_y 3 3
        set sim_noise = astroPhotAperMean
        # 
        # check too close to large nearby source #<TODO>#
        set sim_contam = sim_noise * 0.0
        if('$1'=='goodsn'||'$1'=='GOODSN') { 
            checkTooCloseToLargeLocalGalaxies_goodsn sim_ra sim_de sim_contam
            set sim_contam = -(sim_contam-1)
        }
        # 
        # 
        print 'generateSimPrior: generated $(dimen(sim_id)) sim objects in $1\n' {}
    } else {
        print 'generateSimPrior: Error! To date we can only deal with goodsn, goodss and cosmos!\n' {}
        define errorbreak 1
        define errorbreak ? <Please give Ctrl+C!>
    }
    # 
    # done


luminizeSimPrior
    # 
    #  luminizeSimPrior -- 
    #  
    #  macro read AstroDepthGenGalsim_v3.sm luminizeSimPrior goodsn 24
    #  
    # 
    load astroPhot.sm
    # 
    # check
    if(!$?2 || !is_vector(sim_id) || !is_vector(sim_ra) || !is_vector(sim_de) || !is_vector(sim_mag0) || !is_vector(sim_mag1)) {
        print 'Usage: luminizeSimPrior goodss 24\n' {} 
        print 'Notes: luminizeSimPrior requires 5 vectors: sim_id sim_ra sim_de sim_mag0 sim_mag1\n' {}
        define errorbreak 1
        define errorbreak ? <Please give Ctrl+C!>
        return
    }
    # 
    # convert ra dec to x y and random magnitude
    if(dimen(sim_id)>0 && dimen(sim_ra)>0 && dimen(sim_de)>0 && is_vector(sim_mag0) && is_vector(sim_mag1)) {
        # 
        print 'luminizeSimPrior: luminizing $(dimen(sim_id)) sim objects in $1\n' {}
        # 
        if(sim_mag0<sim_mag1) {
            define mag0 $(sim_mag0)
            define mag1 $(sim_mag1)
        } else {
            define mag0 $(sim_mag1)
            define mag1 $(sim_mag0)
        }
        # 
        convert_ad2xy $SciPhoto_$2.fits sim_ra sim_de \
                      $xBias_$2 $yBias_$2 $2
                      # output sky2xy_x sky2xy_y
        set sim_x = sky2xy_x
        set sim_y = sky2xy_y
        set sim_mag = $mag0+($mag1-$mag0)*random(dimen(sim_id))
        set fit_mag = sim_mag*0.0
        set fit_err = sim_mag*0.0
        set fit_rms = sim_mag*0.0
        set fit_res = sim_mag*0.0
        set fit_obs = sim_mag*0.0
        set fit_close = sim_mag*0.0
        set fit_crowd = sim_mag*0.0
        set sim_id = float(sim_id)
        print 'luminizeSimPrior: luminized $(dimen(sim_id)) sim objects in $1\n' {}
        print 'luminizeSimPrior: created vectors sim_x sim_y sim_mag fit_mag fit_err fit_rms fit_res fit_obs fit_close fit_crowd\n' {}
    }
    # 
    # done


readSimlist 01
    if($?1){
        data $1 read {sim_x 1 sim_y 2 sim_mag 3 fit_mag 4 fit_err 5 fit_rms 6 \
                      fit_res 7 fit_close 8 fit_crowd 9 fit_obs 10 sim_id 11}
    }


writeSimlist 01
    if($?1){
        print $1 '%15.3f %15.3f %15g %15g %15g %15g %15g %15g %15g %15g %15.0f\n' \
        {sim_x sim_y sim_mag fit_mag fit_err fit_rms fit_res fit_close fit_crowd fit_obs sim_id}
    }


readSimRADec 01
    # 
    # read sim object ra dec list
    if($?1){
        data $1 read {sim_id 1 sim_ra 2 sim_de 3 sim_noise 4 sim_contam 5}
    }


writeSimRADec 01
    # 
    # write sim object ra dec list
    if(dimen(sim_id)>0) {
        if($?1){
            print $1 '%15.0f %15.7f %15.7f %15g %15g\n' {sim_id sim_ra sim_de sim_noise sim_contam}
            print 'WriteSimObjects: saved $(dimen(sim_id)) sim objects ra dec to $3\n' {}
        }
    } else {
        print 'WriteSimObjects: please set sim_id sim_ra sim_de sim_noise sim_contam!\n' {}
    }

    











    











