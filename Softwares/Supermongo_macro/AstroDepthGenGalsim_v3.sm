GenGalsim 
    #  
    #  generate galsim prior list
    #  
    #  macro read AstroDepthGenGalsim_v3.sm GenGalsim
    #  
    generateSimPrior goodss 99
    luminizeSimPrior goodss 24



generateSimPrior 03
    # 
    #  generateSimPrior which contains only RA Dec Positions but no Magnitudes
    #  
    #  macro read AstroDepthGenGalsim_v3.sm generateSimPrior goodss 30
    #  
    # 
    load astroPhot.sm
    # 
    # check
    if(!$?2) {
        print 'Usage: generateSimPrior goodss 30\n' {} 
        define errorbreak 1
        define errorbreak ? <Please give Ctrl+C!>
        return
    }
    # 
    # generate random position
    if('$1'=='goodsn'||'$1'=='GOODSN') {
        # 
        # generate random ra dec
        set x=17*random($2)               # <TODO> for GOODSN only
        set y=11*random($2)               # <TODO> for GOODSN only
        define ang 44                     # <TODO> for GOODSN only
        set X=x*cosd($ang)-y*sind($ang)
        set Y=x*sind($ang)+y*cosd($ang)
        set sim_ra = 189.17+X/60/.46-.0   # <TODO> for GOODSN only
        set sim_de = 62.08+Y/60-.0        # <TODO> for GOODSN only
    } 
    if('$1'=='goodss'||'$1'=='GOODSS') {
        # 
        # generate random ra dec
        set x=11*random($2)*0.45          # <TODO> for GOODSS only
        set y=17*random($2)*0.45          # <TODO> for GOODSS only
        define ang 168                    # <TODO> for GOODSS only
        set X=x*cosd($ang)-y*sind($ang)
        set Y=x*sind($ang)+y*cosd($ang)
        set sim_ra = 53.129596+X/60/cosd(-27.802849) # <TODO> for GOODSS only
        set sim_de = -27.802849+Y/60                 # <TODO> for GOODSS only
    }
    if('$1'=='cosmos'||'$1'=='COSMOS') {
        # 
        # generate random ra dec
        set x=66.67*random($2)*0.45       # <TODO> for COSMOS only
        set y=66.67*random($2)*0.45       # <TODO> for COSMOS only
        define ang 0.0                    # <TODO> for COSMOS only
        set X=x*cosd($ang)-y*sind($ang)
        set Y=x*sind($ang)+y*cosd($ang)
        set sim_ra = 150.12653+X/60/cosd(2.2058338) # <TODO> for COSMOS only
        set sim_de = 2.2058338+Y/60                 # <TODO> for COSMOS only
    }
    if(is_vector(sim_ra) && is_vector(sim_de)) {
        set sim_id = 1,$2
        set sim_id = float(sim_id)
        print 'generateSimPrior: generating $(dimen(sim_id)) sim objects in $1\n' {}
        # 
        # calc noise at 24um map
        set_$1""_photometry_constants_24
        if(!is_file($SciPhoto_24.fits)){!find $DirPhoto_24 -name $SciPhoto_24.fits -print0 | xargs -0 ln -s}
        if(!is_file($RmsPhoto_24.fits)){!find $DirPhoto_24 -name $RmsPhoto_24.fits -print0 | xargs -0 ln -s}
        convert_ad2xy $SciPhoto_24.fits sim_ra sim_de \
                      $xBias_24 $yBias_24 24
                      # output sky2xy_x sky2xy_y
        get_image_aper_mean_rect $RmsPhoto_24.fits sky2xy_x sky2xy_y 3 3
        set sim_noise = astroPhotAperMean
        # 
        # check too close to large nearby source #<TODO># 
        checkTooCloseToLargeLocalGalaxies_goodsn sim_ra sim_de sim_contam
        set sim_contam = -(sim_contam-1)
        # 
        # 
        print 'generateSimPrior: generated $(dimen(sim_id)) sim objects in $1\n' {}
    } else {
        print 'generateSimPrior: Error! To date we can only deal with goodsn, goodss and cosmos!\n' {}
        define errorbreak 1
        define errorbreak ? <Please give Ctrl+C!>
    }
    # 
    # done



luminizeSimPrior 02
    # 
    #  luminizeSimPrior -- 
    #  
    #  macro read AstroDepthGenGalsim_v3.sm luminizeSimPrior goodsn 24
    #  
    # 
    load astroPhot.sm
    # 
    # check
    if(!$?2 || !is_vector(sim_id) || !is_vector(sim_ra) || !is_vector(sim_de)) {
        print 'Usage: luminizeSimPrior goodss 24\n' {} 
        print 'Notes: luminizeSimPrior requires 3 vectors: sim_id sim_ra sim_de\n' {}
        define errorbreak 1
        define errorbreak ? <Please give Ctrl+C!>
        return
    }
    # 
    # convert ra dec to x y and random magnitude
    if(dimen(sim_id)>0 && dimen(sim_ra)>0 && dimen(sim_de)>0) {
        # 
        print 'luminizeSimPrior: luminizing $(dimen(sim_id)) sim objects in $1\n' {}
        # 
        # if('$2'=='24'){
        #     define mag0 -4.0 # about 10 sigma flux 0.32 mJy
        #     define mag1 +1.5 # about  1 sigma flux 0.0015 mJy
        #     # set mag = {1.5 -4.0} set err = {0.1 0.1} 
        #     # convert_mag2flux goodss 24 mag err
        #     # print {mag err f24 df24}
        # } #<TODO>#
        set_$1""_photometry_constants_""$2
        if(!$?SimMag0_$2||!$?SimMag0_$2) { ###<note><20150610><dzliu>### now we define mag0 mag1 in astroPhot.sm
            print 'luminizeSimPrior: Error! SimMag0_$2 or SimMag1_$2 not defined in astroPhot.sm!\n' {} 
            define errorbreak 1
            define errorbreak ? <Please give Ctrl+C!>
            return
        } else {
            define mag0 $SimMag0_$2
            define mag1 $SimMag1_$2
        }
        convert_ad2xy $SciPhoto_$2.fits sim_ra sim_de \
                      $xBias_$2 $yBias_$2 $2
                      # output sky2xy_x sky2xy_y
        set sim_x = sky2xy_x
        set sim_y = sky2xy_y
        set sim_mag = $mag0+($mag1-$mag0)*random(dimen(sim_id))
        set fit_mag = sim_mag*0.0
        set fit_err = sim_mag*0.0
        set fit_rms = sim_mag*0.0
        set fit_res = sim_mag*0.0
        set fit_obs = sim_mag*0.0
        set fit_close = sim_mag*0.0
        set fit_crowd = sim_mag*0.0
        set sim_id = float(sim_id)
        print 'luminizeSimPrior: luminized $(dimen(sim_id)) sim objects in $1\n' {}
        print 'luminizeSimPrior: created vectors sim_x sim_y sim_mag fit_mag fit_err fit_rms fit_res fit_obs fit_close fit_crowd\n' {}
    }
    # 
    # done



readSimlist 01
    if($?1){
        data $1 read {sim_x 1 sim_y 2 sim_mag 3 fit_mag 4 fit_err 5 fit_rms 6 \
                      fit_res 7 fit_close 8 fit_crowd 9 fit_obs 10 sim_id 11}
    }

writeSimlist 01
    if($?1){
        print $1 '%15.3f %15.3f %15g %15g %15g %15g %15g %15g %15g %15g %15.0f\n' \
        {sim_x sim_y sim_mag fit_mag fit_err fit_rms fit_res fit_close fit_crowd fit_obs sim_id}
    }

readSimRADec 01
    # 
    # read sim object ra dec list
    if($?1){
        data $1 read {sim_id 1 sim_ra 2 sim_de 3 sim_noise 4 sim_contam 5}
    }

writeSimRADec 01
    # 
    # write sim object ra dec list
    if(dimen(sim_id)>0) {
        if($?1){
            print $1 '%15.0f %15.7f %15.7f %15g %15g\n' {sim_id sim_ra sim_de sim_noise sim_contam}
            print 'WriteSimObjects: saved $(dimen(sim_id)) sim objects ra dec to $3\n' {}
        }
    } else {
        print 'WriteSimObjects: please set sim_id sim_ra sim_de sim_noise sim_contam!\n' {}
    }


checkTooCloseToLargeLocalGalaxies_goodsn 03
    # 
    # check input checkclose_ra and checkclose_dec
    set checkclose_ra = $1
    set checkclose_dec = $2
    set dimen(checkclose_good) = dimen(checkclose_ra)
    set checkclose_localRA  = {189.42923 189.33849 189.22009 189.27719 189.25615 189.40804 189.3840 189.13526 189.35630 189.22074}
    set checkclose_localDec = {62.316883 62.212736 62.302124 62.286389 62.311912 62.275457 62.28283 62.283570 62.327734 62.124015}
    set checkclose_localRad = {20.000000 20.000000 16.000000 20.000000 16.000000 20.000000 10.00000 20.000000 16.000000 10.000000}
    do checkclose_i=0,dimen(checkclose_ra)-1 {
        set checkclose_dix2 = (checkclose_localRA-checkclose_ra[$checkclose_i])**2
        set checkclose_diy2 = (checkclose_localDec-checkclose_dec[$checkclose_i])**2
        set checkclose_diff = sqrt(checkclose_dix2+checkclose_diy2)*3600.0
        if(sum(checkclose_diff<checkclose_localRad)>0) {
            set checkclose_good[$checkclose_i] = 0
        } else {
            set checkclose_good[$checkclose_i] = 1
        }
    }
    set $3 = checkclose_good
    # 
    # done


