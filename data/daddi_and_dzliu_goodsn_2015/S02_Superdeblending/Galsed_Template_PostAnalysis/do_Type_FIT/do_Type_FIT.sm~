go
    # 
    #  macro read do_Type_FIT.sm go
    # 
    define band 100
    define fcut$band 0.05
    calc_number_count_versus_cutting_flux
    plot_number_count_versus_cutting_flux
    print_SED_predictions

select_sources_to_fit
    # #<TODO>#
    # select sources to fit, i.e. Type_FIT = 1
    # by the input cutting flux $fcut$band
    if($?band) {
        if($?fcut$band && is_vector(xf$band) && is_vector(xe$band) && is_vector(crow$band)){
            set fit$band = ((xf$band+2.0*xe$band)/crow$band>=$fcut$band)
            set exc$band = !fit$band
            set nfit$band = sum(fit$band)
            set nexc$band = sum(exc$band)
            set qfit$band = float(sum(fit$band))/float(dimen(fit$band))
            set qexc$band = float(sum(exc$band))/float(dimen(exc$band))
            if($?area$band && $?fwhm$band) {
                set rfit$band = 0 #<TODO>#
                set rexc$band = 0 #<TODO>#
            }
        }
    }

read_data
    # 
    # read SED output and constants
    # 
    ##define band 100
    ##define fcut$band 0.0
    if($?band) {
        load rfile.sm 
        rfile "../RadioOwenMIPS24_priors_v5_20151201_BeforeBand100.txt"
        rfile "../ResLMTfluxes_v6_BeforeBand100_Pass2.txt"
        load astroPhot.sm
        set_goodsn_photometry_constants_$band
        set PSFFWHM = $rBeam_$band
        set PSFArea = pi/(4.0*ln(2))*PSFFWHM**2
        set GOODSNArea = 10.0*16.0*3600.0
        set GOODSNGoodArea = 111.0*3600.0
        # 
        # compute crowdiness
        # 
        load crowdiness.sm
        set crow = crowdiness(_ra,_de,PSFFWHM,1.5)
        set crow$band = crow #<TODO>#
        ##set crow$band = crow * 0.0 + 1.0 #<TODO>#
        ###
        ###<test>
        ###set sort_crow_numb = _crd_numb
        ###set sort_crow = crow
        ###set sort_id = _id
        ###sort {sort_crow sort_crow_numb sort_id}
        ###set sort_crow_numb = reverse(sort_crow_numb)
        ###set sort_crow = reverse(sort_crow)
        ###set sort_id = reverse(sort_id)
        ##echo $(PSFArea)
        ##print '%10.0f%10g%10g\n' {sort_id sort_crow sort_crow_numb}
        ##define aaa ?
    }

calc_number_count_versus_cutting_flux
    # 
    #  macro read do_Type_FIT.sm calc_number_count_versus_cutting_flux
    # 
    # 
    # Read SED fluxes
    # 
    ##define band 100
    ##define fcut$band 0.0
    read_data
    # 
    # loop cutting fluxes and write to file
    # 
    set fcuts = 0.0,1.0,0.01
    do i=0,dimen(fcuts)-1 {
        # cutting by flux fcut
        # see how many sources left
        set fcut = fcuts[$i]
        set ysou = ((xf$band+2.0*xe$band)>=fcut)
        set nsou = sum(ysou)
        set ncut = dimen(ysou)-sum(ysou)
        set rsou = nsou/GOODSNArea*PSFArea
        set gysou = ysou if(goodArea)
        set gnsou = sum(gysou) # in goodArea, number of sources
        set grsou = gnsou/GOODSNGoodArea*PSFArea
        if($i==0) {
            print "log_cutting_flux_"$band".txt" '\#   fcut    ncut    nsou    rsou   gnsou   grsou\n\#\n' {}
            define print_noheader 1
        }
        print +"log_cutting_flux_"$band".txt" '%8.3f%8g%8g%8.3f%8g%8.3f\n' {fcut ncut nsou rsou gnsou grsou}
    }
    define print_noheader 0
    !head -n 5 "log_cutting_flux_"$band".txt"
    !echo "..."
    !tail -n 5 "log_cutting_flux_"$band".txt"

plot_number_count_versus_cutting_flux
    # do the plot
    if($?band) {
        # 
        # read fcut and ncut nsou
        load rfile.sm
        rfile "log_cutting_flux_"$band".txt"
        # 
        # do plot
        device pdf "plot_cutting_flux_"$band".pdf"
        location 5000 31500 5000 31500
        expand 1.5 lweight 3.5
        define TeX_strings 1
        xtcolours
        limits fcut rsou
        ctype default expand 1.65 box
        ctype default expand 2.05 xlabel critical flux [mJy]
        ctype default expand 1.85 ylabel number per beam
        ctype default ptype 4 0 points fcut rsou
        ctype default ptype 4 1 
        device nodevice
    }

print_SED_predictions
    # 
    #read_data
    if($?band && is_vector(_ra) && is_vector(_de) && is_vector(PSFFWHM)) {
      if($?fcut$band && is_vector(crow$band)) {
        set fit$band = int((xf$band+2.0*xe$band)/crow$band>=$fcut$band)
        set exc$band = int(!fit$band)
        # 
        # now do the source filtering and recompute crow$band
        foreach var {_id _ra _de} {set s$var=$var if(fit$band)}
        set s_crow = crowdiness(s_ra,s_de,PSFFWHM,1.5)
        set s_id = 0,dimen(_id)-1
        set s_id = s_id if(fit$band)
        set newcrow = _id*0.0
        set newcrow[s_id] = s_crow
        # 
        # write to file
        print "SED_predictions_"$band"_201512.txt" '%10.0f%13.7f%13.7f%8d%8d%10g%10g%10g%10g\n' <_id _ra _de exc$band fit$band xf$band xe$band crow$band newcrow>
        # 
        # print message
        print  "SED_predictions_"$band"_201512.log" 'Total source number: $(dimen(_ra))\n' {}
        print +"SED_predictions_"$band"_201512.log" 'Fitting source number: $(sum(fit$band))\n' {}
        print +"SED_predictions_"$band"_201512.log" 'Subtract source number: $(sum(exc$band))\n' {}
        !cat   "SED_predictions_"$band"_201512.log"
      }
    }




